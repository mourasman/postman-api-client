/**
 * Postman API
 * Postman API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorInvalidParams from '../model/ErrorInvalidParams';
import ImportexternalAPIspecificationRequest from '../model/ImportexternalAPIspecificationRequest';
import SuccessImportStringifiedbody from '../model/SuccessImportStringifiedbody';
import SuccessImporttoaspecificworkspacewithworkspaceIDpassedintheheaders from '../model/SuccessImporttoaspecificworkspacewithworkspaceIDpassedintheheaders';

/**
* Import service.
* @module api/ImportApi
* @version 1.0.0
*/
export default class ImportApi {

    /**
    * Constructs a new ImportApi. 
    * @alias module:api/ImportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the importexporteddata operation.
     * @callback module:api/ImportApi~importexporteddataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessImporttoaspecificworkspacewithworkspaceIDpassedintheheaders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import exported data
     * This endpoint allows you to import your exported Postman data. For more information about how you can export your data, refer <a href=\"https://go.postman.co/me/export\">Export your Postman data.</a>  On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.  **Note**: Refer to examples for different scenarios.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header.
     * @param {String} xApiKey 
     * @param {String} contentType 
     * @param {String} type 
     * @param {String} input File containing the exported collections or environments
     * @param {module:api/ImportApi~importexporteddataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessImporttoaspecificworkspacewithworkspaceIDpassedintheheaders}
     */
    importexporteddata(xApiKey, contentType, type, input, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling importexporteddata");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling importexporteddata");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling importexporteddata");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling importexporteddata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey,
        'Content-Type': contentType
      };
      let formParams = {
        'type': type,
        'input': input
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SuccessImporttoaspecificworkspacewithworkspaceIDpassedintheheaders;
      return this.apiClient.callApi(
        '/import/exported', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importexternalAPIspecification operation.
     * @callback module:api/ImportApi~importexternalAPIspecificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessImportStringifiedbody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import external API specification
     * This endpoint allows you to import external API specifications into Postman.  Currently, this endpoint only supports the <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md\">OpenAPI</a> specification, for which the `importType` will be `openapi`.  On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.  Supported `type`s:  - string - json - file  The `input` parameter should be defined based on the `type`.  > To import a file, request body must be form-data with `type` param set to `file`.  **Note**: Refer to examples for different scenarios.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header.
     * @param {String} xApiKey 
     * @param {String} importType 
     * @param {module:model/ImportexternalAPIspecificationRequest} importexternalAPIspecificationRequest 
     * @param {module:api/ImportApi~importexternalAPIspecificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessImportStringifiedbody}
     */
    importexternalAPIspecification(xApiKey, importType, importexternalAPIspecificationRequest, callback) {
      let postBody = importexternalAPIspecificationRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling importexternalAPIspecification");
      }
      // verify the required parameter 'importType' is set
      if (importType === undefined || importType === null) {
        throw new Error("Missing the required parameter 'importType' when calling importexternalAPIspecification");
      }
      // verify the required parameter 'importexternalAPIspecificationRequest' is set
      if (importexternalAPIspecificationRequest === undefined || importexternalAPIspecificationRequest === null) {
        throw new Error("Missing the required parameter 'importexternalAPIspecificationRequest' when calling importexternalAPIspecification");
      }

      let pathParams = {
        'importType': importType
      };
      let queryParams = {
      };
      let headerParams = {
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessImportStringifiedbody;
      return this.apiClient.callApi(
        '/import/{importType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
