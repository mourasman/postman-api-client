/**
 * Postman API
 * Postman API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMockRequest from '../model/CreateMockRequest';
import CreateMockinaWorkspace from '../model/CreateMockinaWorkspace';
import SuccessResponse from '../model/SuccessResponse';
import SuccessResponse1 from '../model/SuccessResponse1';
import SuccessfulResponse1 from '../model/SuccessfulResponse1';
import SuccessfulResponse2 from '../model/SuccessfulResponse2';
import SuccessfulResponse3 from '../model/SuccessfulResponse3';
import UpdateMockRequest from '../model/UpdateMockRequest';

/**
* Mocks service.
* @module api/MocksApi
* @version 1.0.0
*/
export default class MocksApi {

    /**
    * Constructs a new MocksApi. 
    * @alias module:api/MocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allMocks operation.
     * @callback module:api/MocksApi~allMocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All Mocks
     * This endpoint fetches all the mocks that you have created.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {module:api/MocksApi~allMocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulResponse1}
     */
    allMocks(xApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling allMocks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SuccessfulResponse1;
      return this.apiClient.callApi(
        '/mocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMock operation.
     * @callback module:api/MocksApi~createMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMockinaWorkspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Mock
     * This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.  You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {module:model/CreateMockRequest} createMockRequest 
     * @param {module:api/MocksApi~createMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMockinaWorkspace}
     */
    createMock(xApiKey, createMockRequest, callback) {
      let postBody = createMockRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling createMock");
      }
      // verify the required parameter 'createMockRequest' is set
      if (createMockRequest === undefined || createMockRequest === null) {
        throw new Error("Missing the required parameter 'createMockRequest' when calling createMock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMockinaWorkspace;
      return this.apiClient.callApi(
        '/mocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMock operation.
     * @callback module:api/MocksApi~deleteMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulResponse3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Mock
     * This endpoint allows you to delete an existing mock using its `uid`.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {String} mockUid 
     * @param {module:api/MocksApi~deleteMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulResponse3}
     */
    deleteMock(xApiKey, mockUid, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling deleteMock");
      }
      // verify the required parameter 'mockUid' is set
      if (mockUid === undefined || mockUid === null) {
        throw new Error("Missing the required parameter 'mockUid' when calling deleteMock");
      }

      let pathParams = {
        'mock_uid': mockUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SuccessfulResponse3;
      return this.apiClient.callApi(
        '/mocks/{mock_uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishMock operation.
     * @callback module:api/MocksApi~publishMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish Mock
     * This endpoint publishes the mock you have created using its `uid`  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {String} mockUid 
     * @param {module:api/MocksApi~publishMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse1}
     */
    publishMock(xApiKey, mockUid, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling publishMock");
      }
      // verify the required parameter 'mockUid' is set
      if (mockUid === undefined || mockUid === null) {
        throw new Error("Missing the required parameter 'mockUid' when calling publishMock");
      }

      let pathParams = {
        'mock_uid': mockUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponse1;
      return this.apiClient.callApi(
        '/mocks/{mock_uid}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singleMock operation.
     * @callback module:api/MocksApi~singleMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulResponse2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Mock
     * This endpoint fetches you the basic information about a single mock using its `uid`.  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {String} mockUid 
     * @param {module:api/MocksApi~singleMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulResponse2}
     */
    singleMock(xApiKey, mockUid, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling singleMock");
      }
      // verify the required parameter 'mockUid' is set
      if (mockUid === undefined || mockUid === null) {
        throw new Error("Missing the required parameter 'mockUid' when calling singleMock");
      }

      let pathParams = {
        'mock_uid': mockUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SuccessfulResponse2;
      return this.apiClient.callApi(
        '/mocks/{mock_uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishMock operation.
     * @callback module:api/MocksApi~unpublishMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpublish Mock
     * This endpoint unpublishes the mock you have created using its `uid`  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {String} mockUid 
     * @param {module:api/MocksApi~unpublishMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse1}
     */
    unpublishMock(xApiKey, mockUid, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling unpublishMock");
      }
      // verify the required parameter 'mockUid' is set
      if (mockUid === undefined || mockUid === null) {
        throw new Error("Missing the required parameter 'mockUid' when calling unpublishMock");
      }

      let pathParams = {
        'mock_uid': mockUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessResponse1;
      return this.apiClient.callApi(
        '/mocks/{mock_uid}/unpublish', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMock operation.
     * @callback module:api/MocksApi~updateMockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Mock
     * This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields, * name * environment * description * private * versionTag  > Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * @param {String} xApiKey 
     * @param {String} mockUid 
     * @param {module:model/UpdateMockRequest} updateMockRequest 
     * @param {module:api/MocksApi~updateMockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResponse}
     */
    updateMock(xApiKey, mockUid, updateMockRequest, callback) {
      let postBody = updateMockRequest;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling updateMock");
      }
      // verify the required parameter 'mockUid' is set
      if (mockUid === undefined || mockUid === null) {
        throw new Error("Missing the required parameter 'mockUid' when calling updateMock");
      }
      // verify the required parameter 'updateMockRequest' is set
      if (updateMockRequest === undefined || updateMockRequest === null) {
        throw new Error("Missing the required parameter 'updateMockRequest' when calling updateMock");
      }

      let pathParams = {
        'mock_uid': mockUid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = SuccessResponse;
      return this.apiClient.callApi(
        '/mocks/{mock_uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
