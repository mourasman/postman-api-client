/**
 * Postman API
 * Postman API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LastRun from './LastRun';
import Notifications from './Notifications';
import Options from './Options';
import Schedule from './Schedule';

/**
 * The Monitor1 model module.
 * @module model/Monitor1
 * @version 1.0.0
 */
class Monitor1 {
    /**
     * Constructs a new <code>Monitor1</code>.
     * @alias module:model/Monitor1
     * @param id {String} 
     * @param name {String} 
     * @param uid {String} 
     * @param owner {String} 
     * @param collectionUid {String} 
     * @param environmentUid {String} 
     * @param options {module:model/Options} 
     * @param notifications {module:model/Notifications} 
     * @param distribution {Array.<String>} 
     * @param schedule {module:model/Schedule} 
     * @param lastRun {module:model/LastRun} 
     */
    constructor(id, name, uid, owner, collectionUid, environmentUid, options, notifications, distribution, schedule, lastRun) { 
        
        Monitor1.initialize(this, id, name, uid, owner, collectionUid, environmentUid, options, notifications, distribution, schedule, lastRun);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, uid, owner, collectionUid, environmentUid, options, notifications, distribution, schedule, lastRun) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['uid'] = uid;
        obj['owner'] = owner;
        obj['collectionUid'] = collectionUid;
        obj['environmentUid'] = environmentUid;
        obj['options'] = options;
        obj['notifications'] = notifications;
        obj['distribution'] = distribution;
        obj['schedule'] = schedule;
        obj['lastRun'] = lastRun;
    }

    /**
     * Constructs a <code>Monitor1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Monitor1} obj Optional instance to populate.
     * @return {module:model/Monitor1} The populated <code>Monitor1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Monitor1();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('collectionUid')) {
                obj['collectionUid'] = ApiClient.convertToType(data['collectionUid'], 'String');
            }
            if (data.hasOwnProperty('environmentUid')) {
                obj['environmentUid'] = ApiClient.convertToType(data['environmentUid'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = Options.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = Notifications.constructFromObject(data['notifications']);
            }
            if (data.hasOwnProperty('distribution')) {
                obj['distribution'] = ApiClient.convertToType(data['distribution'], ['String']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = Schedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('lastRun')) {
                obj['lastRun'] = LastRun.constructFromObject(data['lastRun']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Monitor1.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Monitor1.prototype['name'] = undefined;

/**
 * @member {String} uid
 */
Monitor1.prototype['uid'] = undefined;

/**
 * @member {String} owner
 */
Monitor1.prototype['owner'] = undefined;

/**
 * @member {String} collectionUid
 */
Monitor1.prototype['collectionUid'] = undefined;

/**
 * @member {String} environmentUid
 */
Monitor1.prototype['environmentUid'] = undefined;

/**
 * @member {module:model/Options} options
 */
Monitor1.prototype['options'] = undefined;

/**
 * @member {module:model/Notifications} notifications
 */
Monitor1.prototype['notifications'] = undefined;

/**
 * @member {Array.<String>} distribution
 */
Monitor1.prototype['distribution'] = undefined;

/**
 * @member {module:model/Schedule} schedule
 */
Monitor1.prototype['schedule'] = undefined;

/**
 * @member {module:model/LastRun} lastRun
 */
Monitor1.prototype['lastRun'] = undefined;






export default Monitor1;

