/**
 * Postman API
 * Postman API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Collection3 from './Collection3';
import Environment3 from './Environment3';
import Mock7 from './Mock7';
import Monitor7 from './Monitor7';

/**
 * The Workspace2 model module.
 * @module model/Workspace2
 * @version 1.0.0
 */
class Workspace2 {
    /**
     * Constructs a new <code>Workspace2</code>.
     * @alias module:model/Workspace2
     * @param name {String} 
     * @param type {String} 
     * @param description {String} 
     * @param collections {Array.<module:model/Collection3>} 
     * @param environments {Array.<module:model/Environment3>} 
     * @param mocks {Array.<module:model/Mock7>} 
     * @param monitors {Array.<module:model/Monitor7>} 
     */
    constructor(name, type, description, collections, environments, mocks, monitors) { 
        
        Workspace2.initialize(this, name, type, description, collections, environments, mocks, monitors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, description, collections, environments, mocks, monitors) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['description'] = description;
        obj['collections'] = collections;
        obj['environments'] = environments;
        obj['mocks'] = mocks;
        obj['monitors'] = monitors;
    }

    /**
     * Constructs a <code>Workspace2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Workspace2} obj Optional instance to populate.
     * @return {module:model/Workspace2} The populated <code>Workspace2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Workspace2();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], [Collection3]);
            }
            if (data.hasOwnProperty('environments')) {
                obj['environments'] = ApiClient.convertToType(data['environments'], [Environment3]);
            }
            if (data.hasOwnProperty('mocks')) {
                obj['mocks'] = ApiClient.convertToType(data['mocks'], [Mock7]);
            }
            if (data.hasOwnProperty('monitors')) {
                obj['monitors'] = ApiClient.convertToType(data['monitors'], [Monitor7]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
Workspace2.prototype['name'] = undefined;

/**
 * @member {String} type
 */
Workspace2.prototype['type'] = undefined;

/**
 * @member {String} description
 */
Workspace2.prototype['description'] = undefined;

/**
 * @member {Array.<module:model/Collection3>} collections
 */
Workspace2.prototype['collections'] = undefined;

/**
 * @member {Array.<module:model/Environment3>} environments
 */
Workspace2.prototype['environments'] = undefined;

/**
 * @member {Array.<module:model/Mock7>} mocks
 */
Workspace2.prototype['mocks'] = undefined;

/**
 * @member {Array.<module:model/Monitor7>} monitors
 */
Workspace2.prototype['monitors'] = undefined;






export default Workspace2;

