openapi: 3.0.0
info:
  title: Postman API
  description: "Postman API"
  version: '1.0.0'
servers:
  - url: https://api.getpostman.com
    variables: {}
paths:
  /collections:
    get:
      tags:
        - Collections
      summary: All Collections
      description: >-
        The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.


        The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: AllCollections
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 212
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 27 May 2016 21:36:47 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"1ae-4X8iFcujMd+trF9JIw72UA"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1464385067
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ValidResponse'
              example:
                collections:
                  - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
                    name: Cloud API
                    owner: 631643
                    uid: 631643-dac5eac9-148d-a32e-b76b-3edee9da28f7
                  - id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
                    name: Sample Collection
                    owner: 631643
                    uid: 631643-f2e66c2e-5297-e4a5-739e-20cbb90900e3
                  - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
                    name: Postman Echo
                    owner: 631643
                    uid: 631643-f695cab7-6878-eb55-7943-ad88e1ccfd65
      deprecated: false
    post:
      tags:
        - Collections
      summary: Create Collection
      description: >-
        This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).


        On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.


        You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: CreateCollection
      parameters:
        - name: workspace
          in: query
          description: ''
          required: false
          style: simple
          schema:
            type: string
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
            example:
              collection:
                info:
                  name: Sample Collection {{$randomInt}}
                  description: This is just a sample collection.
                  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                item:
                  - name: This is a folder
                    item:
                      - name: Sample POST Request
                        request:
                          url: https://postman-echo.com/post
                          method: POST
                          header:
                            - key: Content-Type
                              value: application/json
                          body:
                            mode: raw
                            raw: '{"data": "123"}'
                          description: This is a sample POST Request
                  - name: Sample GET Request
                    request:
                      url: https://postman-echo/get
                      method: GET
                      description: This is a sample GET Request
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollectioninaWorkspace'
              example:
                collection:
                  id: 2412a72c-1d8e-491b-aced-93809c0e94e9
                  name: Sample Collection
                  uid: 5852-2412a72c-1d8e-491b-aced-93809c0e94e9
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: malformedRequestError
                  message: 'Missing required property: name at info'
      deprecated: false
  /collections/{collection_uid}:
    get:
      tags:
        - Collections
      summary: Single Collection
      description: >-
        Access the contents of a collection that is accessible to you using its unique id (`uid`).


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: SingleCollection
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: collection_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 27 May 2016 21:37:31 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"453-t7Du3QMg1i7hkk6S4e3NvA"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 57
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1464385067
            transfer-encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ValidResponse1'
              example:
                collection:
                  variables: []
                  info:
                    name: Sample Collection
                    _postman_id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
                    description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
                    schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
                  item:
                    - id: 82ee981b-e19f-962a-401e-ea34ebfb4848
                      name: Request Headers
                      event:
                        - listen: test
                          script:
                            type: text/javascript
                            exec: >+
                              var responseJSON;

                              try {
                                  tests["Body contains headers"] = responseBody.has("headers");
                                  responseJSON = JSON.parse(responseBody);
                                  tests["Header contains host"] = "host" in responseJSON.headers;
                                  tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                              }

                              catch (e) { }



                      request:
                        url: https://echo.getpostman.com/headers
                        method: GET
                        header:
                          - key: my-sample-header
                            value: Lorem ipsum dolor sit amet
                            description: ''
                        body:
                          mode: formdata
                          formdata: []
                        description: ''
                      response: []
      deprecated: false
    put:
      tags:
        - Collections
      summary: Update Collection
      description: >-
        This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).


        On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.


        Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body.
      operationId: UpdateCollection
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: collection_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionRequest'
            example:
              collection:
                info:
                  name: Sample Collection {{$randomInt}}
                  description: This is just a sample collection.
                  _postman_id: 174bad7c-07e3-45f3-914f-36cf84e5586f
                  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                item:
                  - name: This is a folder
                    item:
                      - name: Sample POST Request
                        request:
                          url: https://postman-echo.com/post
                          method: POST
                          header:
                            - key: Content-Type
                              value: application/json
                          body:
                            mode: raw
                            raw: '{"data": "123"}'
                          description: This is a sample POST Request
                  - name: Sample GET Request
                    request:
                      url: https://postman-echo/get
                      method: GET
                      description: This is a sample GET Request
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 110
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 23 Nov 2016 12:03:23 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"89-Tuf/A5YFyf5ewpKKrb1Zww"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 56
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1479902614
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CollectionUpdated'
              example:
                collection:
                  id: 1d3daef4-2037-4584-ab86-bafd8c8f8a55
                  name: Sample Collection
                  uid: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: collectionMismatchError
                  message: The collection ID in the path does not match the collection ID in the request body.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: forbiddenError
                  message: You do not have enough permissions to perform this action.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionNotFound'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: 1d3daef4-2037-4584-ab86-bafd8c8f8a54
      deprecated: false
    delete:
      tags:
        - Collections
      summary: Delete Collection
      description: >-
        This endpoint allows you to delete an existing collection.


        On successful deletion of the collection, the response returns the `id` and `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: DeleteCollection
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: collection_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 92
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 23 Nov 2016 11:45:05 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"6e-6WPh9C5je+q09Mr1L2eTdQ"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 56
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1479901548
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CollectionDeleted'
              example:
                collection:
                  id: a14c6da7-afba-4a84-bf22-4febbaaced6c
                  uid: 5852-a14c6da7-afba-4a84-bf22-4febbaaced6c
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionNotFound'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified item does not exist.
                  details:
                    item: collection
                    id: a14c6da7-afba-4a84-bf22-4febbaaced6c
      deprecated: false
  /collections/fork/{collection_uid}:
    post:
      tags:
        - Collections
      summary: Create a Fork
      description: >-
        This endpoint allows you to create a fork from an existing collection.


        On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.


        You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: CreateaFork
      parameters:
        - name: workspace
          in: query
          description: Workspace ID is required to create a fork
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{workspace_id}}'
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: collection_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateaForkRequest'
            example:
              name: Fork name
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /collections/merge:
    post:
      tags:
        - Collections
      summary: Merge a Fork
      description: >-
        This endpoint allows you to merge a forked collection back to its destination collection.


        On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.


        You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.


        Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies


        | Merge Strategy | Behaviour |

        | --- | --- |

        | deleteSource | Forked collection is deleted after merging |

        | updateSourceWithDestination | Forked collection is up to date with changes in destination collection |


        If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.



        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: MergeaFork
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeaForkRequest'
            example:
              strategy: deleteSource
              source: '{{source_collection_uid}}'
              destination: '{{destination_collection_uid}}'
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /environments:
    get:
      tags:
        - Environments
      summary: All Environments
      description: >-
        The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..


        The response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: AllEnvironments
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 174
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 27 May 2016 21:30:19 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"137-6vHGuOTB+WAXFzmL5J2roQ"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1464384679
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ValidResponse2'
              example:
                environments:
                  - id: 357668d2-84f1-2264-438b-113095359f80
                    name: Postman Cloud API
                    owner: 631643
                    uid: 631643-357668d2-84f1-2264-438b-113095359f80
                  - id: 84a119b6-f4b1-9120-5f11-a73b17818d70
                    name: Postman Cloud API.template
                    owner: 631643
                    uid: 631643-84a119b6-f4b1-9120-5f11-a73b17818d70
      deprecated: false
    post:
      tags:
        - Environments
      summary: Create Environment
      description: >-
        A sample body is added to the request that conforms to the following JSON schema:


        ```json

        {
          "type": "object",
          "properties": {
            "environment": {
              "type": "object",
              "properties": {
                "name": {
                      "type": "string",
                      "maxLength": 254,
                      "minLength": 1
                    },
                "values": {
                  "type": "array",
                  "maxItems": 100,
                  "additionalItems": false,
                  "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "maxLength": 254
                          "minLength": 1
                        },
                        "value": { "type": "string" },
                        "enabled": { "type": "boolean" }
                      },
                      "required": ["key", "value"]
                    }
                }
              },
              "required": ["name"]
            }
          },
          "required": ["environment"]
        }

        ```


        On successful creation of the environment, the API returns the environment name and `id`.


        You can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: CreateEnvironment
      parameters:
        - name: workspace
          in: query
          description: ''
          required: false
          style: simple
          schema:
            type: string
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnvironmentRequest'
            example:
              environment:
                name: Sample Environment Name (required)
                values:
                  - key: variable_name_1
                    value: The value of the variable
                  - key: variable_name_2
                    value: ''
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEnvironmentinaWorkspace'
              example:
                environment:
                  id: f158266e-306b-4702-a2b9-e4ede7878b7a
                  name: Sample Environment Name (required)
                  uid: 5665-f158266e-306b-4702-a2b9-e4ede7878b7a
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: malformedRequestError
                  message: 'Missing required property: environment'
      deprecated: false
  /environments/{environment_uid}:
    get:
      tags:
        - Environments
      summary: Single Environment
      description: >-
        Access the contents of an environment that is accessible to you using its unique id (`uid`).


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: SingleEnvironment
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: environment_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 172
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 27 May 2016 21:29:40 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"be-uio3LgF25RzA3k1qO7hl5A"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 57
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1464384588
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ValidResponse3'
              example:
                environment:
                  id: 84a119b6-f4b1-9120-5f11-a73b17818d70
                  name: Postman Cloud API.template
                  values:
                    - key: postman_api_key
                      value: ''
                      type: text
                      enabled: true
                      hovered: false
      deprecated: false
    put:
      tags:
        - Environments
      summary: Update Environment
      description: >-
        This endpoint replaces an existing environment.


        A sample body is added to the request that conforms to the following JSON schema:


        ```json

        {
        	"type": "object",
        	"properties": {
        		"environment": {
        			"type": "object",
        			"properties": {
        				"name": {
        					"type": "string",
        					"maxLength": 254,
        					"minLength": 1
        				},
        				"values": {
        					"type": "array",
        					"maxItems": 100,
        					"additionalItems": false,
        					"items": {
        						"type": "object",
        						"properties": {
        							"key": {
        								"type": "string",
        								"maxLength": 254,
        								"minLength": 1
        							},
        							"value": {
        								"type": "string",
        								"maxLength": 254,
        								"minLength": 1
        							},
        							"type": {
        								"type": "string"
        							},
        							"enabled": {
        								"type": "boolean"
        							}
        						},
        						"required": [
        							"key",
        							"value"
        						]
        					}
        				}
        			}
        		}
        	},
        	"required": [
        		"environment"
        	]
        }

        ```


        On successful updation of the environment, the API returns the environment name and `id`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: UpdateEnvironment
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: environment_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEnvironmentRequest'
            example:
              environment:
                name: New Name
                values:
                  - key: name
                    value: Bruce Wayne
                  - key: occupation
                    value: Vigilante
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 110
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 23 Jun 2016 22:33:25 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"83-OejlQB33FVmPE4Eq7sgMSw"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 58
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1466721229
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse'
              example:
                environment:
                  id: 357668d2-84f1-2264-438b-113095359f80
                  name: New Name
                  uid: 631643-357668d2-84f1-2264-438b-113095359f80
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: malformedRequestError
                  message: 'Invalid type: null (expected object) at environment.values.0'
      deprecated: false
    delete:
      tags:
        - Environments
      summary: Delete Environment
      description: >-
        This endpoint allows you to delete a single environment based on an environment's unique `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: DeleteEnvironment
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: environment_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 93
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 23 Nov 2016 10:58:03 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"6f-Ffate/KmwA1dyniRhI/OyQ"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 53
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1479898715
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentDeleted'
              example:
                environment:
                  id: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
                  uid: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified environment does not exist.
      deprecated: false
  /mocks:
    get:
      tags:
        - Mocks
      summary: All Mocks
      description: >-
        This endpoint fetches all the mocks that you have created.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: AllMocks
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 264
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Mon, 06 Mar 2017 15:38:49 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"238-xO+SM8MMUFSXisoiufApyQ"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse1'
              example:
                mocks:
                  - id: 0fca2246-c108-41f5-8454-cc032def329f
                    owner: 1679925
                    uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                    collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                    environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                    mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
                  - id: 2c624389-705a-4e66-9777-05314b431796
                    owner: 1679925
                    uid: 1679925-2c624389-705a-4e66-9777-05314b431796
                    collection: 1679925-37294bb0-e27b-5e52-93ae-c07dd445216d
                    mockUrl: https://2c624389-705a-4e66-9777-05314b431796.mock.pstmn.io
      deprecated: false
    post:
      tags:
        - Mocks
      summary: Create Mock
      description: >-
        This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.


        You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: CreateMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMockRequest'
            example:
              mock:
                collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMockinaWorkspace'
              example:
                mock:
                  id: 0fca2246-c108-41f5-8454-cc032def329f
                  owner: 1679925
                  uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                  collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                  environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                  mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
      deprecated: false
  /mocks/{mock_uid}:
    get:
      tags:
        - Mocks
      summary: Single Mock
      description: >-
        This endpoint fetches you the basic information about a single mock using its `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: SingleMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: mock_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 197
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Mon, 06 Mar 2017 15:37:16 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"13d-ZYjjs3SUBAYM3G91RE5yBw"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse2'
              example:
                mock:
                  id: 0fca2246-c108-41f5-8454-cc032def329f
                  owner: 1679925
                  uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
                  collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
                  environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
                  mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
      deprecated: false
    put:
      tags:
        - Mocks
      summary: Update Mock
      description: >-
        This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,

        * name

        * environment

        * description

        * private

        * versionTag


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: UpdateMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: mock_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMockRequest'
            example:
              mock:
                name: My Mock Server
                environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
                description: example describing update mock description
                private: false
                versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 28 Jul 2020 04:27:23 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"171-jF49udpWXBup5R2Vr/R7fqaU6vo"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            x-frame-options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: SAMEORIGIN
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 58
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1595910484
            x-srv-span:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;s=6d3c282325639b78
            x-srv-trace:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;t=ab5c0df68a5771d1
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 237
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/successResponse'
              example:
                mock:
                  id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
                  owner: 11582779
                  uid: 11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723
                  collection: 11582779-fd6797e2-de6b-4699-975c-85290e4c2499
                  mockUrl: https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io
                  name: My Mock Server
                  config:
                    headers: []
                    matchBody: false
                    matchQueryParams: true
                    matchWildcards: true
                  environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
      deprecated: false
    delete:
      tags:
        - Mocks
      summary: Delete Mock
      description: >-
        This endpoint allows you to delete an existing mock using its `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: DeleteMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: mock_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 89
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Mon, 06 Mar 2017 15:39:40 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"6b-MQrx/mZrWjtpAjcBfGb69Q"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.10.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse3'
              example:
                mock:
                  id: 0fca2246-c108-41f5-8454-cc032def329f
                  uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
      deprecated: false
  /mocks/{mock_uid}/publish:
    post:
      tags:
        - Mocks
      summary: Publish Mock
      description: >-
        This endpoint publishes the mock you have created using its `uid`


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
      operationId: PublishMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: mock_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse1'
              example:
                mock:
                  id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
      deprecated: false
  /mocks/{mock_uid}/unpublish:
    delete:
      tags:
        - Mocks
      summary: Unpublish Mock
      description: >-
        This endpoint unpublishes the mock you have created using its `uid`


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
      operationId: UnpublishMock
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: mock_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse1'
              example:
                mock:
                  id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
      deprecated: false
  /monitors:
    get:
      tags:
        - Monitors
      summary: All Monitors
      description: >-
        The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.


        The response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: AllMonitors
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 229
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 30 Nov 2016 07:23:18 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"1bf-OdFCFXJK2lsIV7bcwRG0DA"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480490657
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse4'
              example:
                monitors:
                  - id: 1e6b6c77-2031-42d0-9948-76d7251b2dd1
                    name: Batman & Sherlock Holmes Monitor
                    uid: 5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1
                    owner: 5852
                  - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
                    name: Team Level Monitor
                    uid: 5886-1e6b6cb7-f13d-4000-acb7-0695757174a8
                    owner: 5886
                  - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    name: Postman Echo Monitor
                    uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                    owner: 5852
      deprecated: false
    post:
      tags:
        - Monitors
      summary: Create Monitor
      description: "This endpoint allows you to create a monitor.\n\nSome sample `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\nYou can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.\n\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: CreateMonitor
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMonitorRequest'
            example:
              monitor:
                name: This is a Monitor Name
                schedule:
                  cron: 0 0 * * *
                  timezone: Asia/Kolkata
                collection: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                environment: 5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 104
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 30 Nov 2016 09:31:59 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"81-KfmiUG/YVW/NgIePUM+cqg"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480498379
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MonitorCreated'
              example:
                monitor:
                  id: 1e6b6dfd-7ba4-4590-9ee1-5948102d7797
                  name: Monitor Name
                  uid: 5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CronPatternNotAllowed'
              example:
                error:
                  name: cronPatternNotAllowedError
                  message: The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.
                  details:
                    pattern: '* * * * *'
      deprecated: false
  /monitors/{monitor_uid}:
    get:
      tags:
        - Monitors
      summary: Single Monitor
      description: >-
        This endpoint fetches you basic information about the monitor using its `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: SingleMonitor
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: monitor_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 244
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 30 Nov 2016 09:03:14 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"15a-ZTYuAAC/bdMBGSKE4KICVw"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480496653
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse5'
              example:
                monitor:
                  id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  name: Postman Echo Monitor
                  uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
                  owner: 5852
                  collectionUid: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
                  environmentUid: 5851-8d05dd85-222c-1452-553b-e76a531b71ed
                  options:
                    strictSSL: true
                    followRedirects: true
                    requestTimeout:
                    requestDelay: 0
                  notifications:
                    onError:
                      - email: john.appleseed@example.com
                    onFailure:
                      - email: john.appleseed@example.com
                  distribution: []
                  schedule:
                    cron: 0 0 * * * *
                    timezone: Asia/Calcutta
                    nextRun: 2016-11-30T09:30:00Z
                  lastRun:
                    status: failed
                    startedAt: 2020-03-25T15:45:29.218Z
                    finishedAt: 2020-03-25T15:45:31.34Z
                    stats:
                      assertions:
                        total: 8
                        failed: 1
                      requests:
                        total: 4
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified monitor does not exist.
      deprecated: false
    put:
      tags:
        - Monitors
      summary: Update Monitor
      description: "This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.\n\nSome example `cron` values are:\n\n| Frequency                  | Cron Pattern   |\n|-----------------------|----------------|\n| Every 5 minutes       | `*/5 * * * *`  |\n| Every 30 minutes     | `*/30 * * * *` |\n| Every Hour         | `0 */1 * * *`  |\n| Every 6 Hours      | `0 */6 * * *`  |\n| Every day at 5pm    | `0 17 * * *`   |\n| Every Monday at 12pm  | `0 12 * * MON` |\n| Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |\n\nNote: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules. \n\nFor more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: UpdateMonitor
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: monitor_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMonitorRequest'
            example:
              monitor:
                name: Updated Monitor Name
                schedule:
                  cron: '*/5 * * * *'
                  timezone: America/Chicago
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 112
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Wed, 30 Nov 2016 09:52:30 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"89-lIaqrvUq4zgI6ccMVU0XRw"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480499610
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MonitorUpdated'
              example:
                monitor:
                  id: 1e6b6e2a-c2ad-4090-b750-0df4e6624352
                  name: Updated Monitor Name
                  uid: 5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352
      deprecated: false
    delete:
      tags:
        - Monitors
      summary: Delete Monitor
      description: >-
        This endpoint can be used to delete an existing monitor using its `uid`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: DeleteMonitor
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: monitor_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 89
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 02 Dec 2016 13:44:44 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"6b-czWJMJECLwheqb5U51YcRw"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 58
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480686329
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MonitorDeleted'
              example:
                monitor:
                  id: 1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
                  uid: 5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified monitor does not exist.
      deprecated: false
  /monitors/{monitor_uid}/run:
    post:
      tags:
        - Monitors
      summary: Run a Monitor
      description: >-
        This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: RunaMonitor
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: monitor_uid
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 820
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Sun, 04 Dec 2016 14:30:26 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"94e-AsVVD4NpEpSicuFS4hKbgA"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.0
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 10
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 9
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1480861833
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MonitorRunwithErrors'
      deprecated: false
  /workspaces:
    get:
      tags:
        - Workspaces
      summary: All workspaces
      description: >-
        The `/workspaces` endpoint returns a list of all [workspaces](https://www.getpostman.com/docs/v6/postman/workspaces/intro_to_workspaces) that is accessible by you. The list includes your own workspaces and the workspaces that you have access to.


        The response contains an array of collection information containing the `name`, `id`, and `type` of each workspace.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: Allworkspaces
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidResponse4'
              example:
                workspaces:
                  - id: 4e6d34c2-cfdb-4b33-8868-12a875bebda3
                    name: My Workspace
                    type: personal
                  - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                    name: Team workspace
                    type: team
      deprecated: false
    post:
      tags:
        - Workspaces
      summary: Create Workspace
      description: >-
        This endpoint allows you to create a workspace and populate it with entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.


        On successful creation of the workspace, the response returns the workspcae `name` and `id`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: CreateWorkspace
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
            example:
              workspace:
                name: New Workspace
                type: personal
                description: Some description
                collections:
                  - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                    name: Straw hats
                    uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                environments:
                  - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                    name: env
                    uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                mocks:
                  - id: cda672ef-1375-40e9-baee-e20ece8d7b65
                monitors:
                  - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse6'
              example:
                workspace:
                  id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                  name: New Workspace
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: Instance not found in the database.
      deprecated: false
  /workspaces/{workspace_id}:
    get:
      tags:
        - Workspaces
      summary: Single workspace
      description: >-
        Access the contents of a workspace that is accessible to you using its id (`id`). Includes the collections, environments, mocks and monitors of that workspace.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: Singleworkspace
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: workspace_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidResponse5'
              example:
                workspace:
                  id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
                  name: Demo workspace
                  type: personal
                  description: Demos.
                  collections:
                    - id: 7c31b469-bd43-4411-9283-6d397855ee0e
                      name: Mock demo - collection
                      uid: 1234-7c31b469-bd43-4411-9283-6d397855ee0e
                    - id: 356fe068-a0f8-4f31-b34d-d12149eac681
                      name: Mock demo - response code
                      uid: 1234-356fe068-a0f8-4f31-b34d-d12149eac681
                  environments:
                    - id: 423fd955-a9c8-47cd-9ab0-09a6a575c4be
                      name: Mock demo - CNX
                      uid: 1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be
                    - id: 24c45c84-5147-4c15-bb9a-c3186b81d3cc
                      name: Mock Demo - response code
                      uid: 1234-24c45c84-5147-4c15-bb9a-c3186b81d3cc
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: Instance not found in the database.
      deprecated: false
    put:
      tags:
        - Workspaces
      summary: Update Workspace
      description: >-
        This endpoint allows you to update a workspace and update it's association to entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.


        On successful updation of the workspace, the response returns the workspcae `name` and `id`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.


        **Note** : The endpoint expects you to send the desired state of the workspace in terms of the associated entities so be careful when trying to update these entities.


        For eg. if your workspace has collections A and B, and in the update call, you send C's uid in the collections array, then A and B would be removed from the workspace and C would be added.
      operationId: UpdateWorkspace
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: workspace_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
            example:
              workspace:
                name: New Workspace updated
                description: Some description
                collections:
                  - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                    name: Straw hats
                    uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
                environments:
                  - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
                    name: env
                    uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
                mocks:
                  - id: cda672ef-1375-40e9-baee-e20ece8d7b65
                monitors:
                  - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse6'
              example:
                workspace:
                  id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
                  name: New Workspace
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: forbiddenError
                  message: You do not have access to update this workspace.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specifiedworkspace-entitiesdonotexist'
              example:
                error:
                  name: instanceNotFoundError
                  message: The specified workspace does not exist.
      deprecated: false
    delete:
      tags:
        - Workspaces
      summary: Delete Workspace
      description: >-
        This endpoint allows you to delete an existing workspace.


        On successful deletion of the workspace, the response returns the `id`.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: DeleteWorkspace
      parameters:
        - name: workspace_id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse8'
              example:
                workspace:
                  id: '{{workspace_id}}'
      deprecated: false
  /me:
    get:
      tags:
        - User
      summary: API Key Owner
      description: >-
        The `/me` endpoint allows you to fetch relevant information pertaining to the API Key being used.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: APIKeyOwner
      parameters:
        - name: X-Api-Key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Credentials:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Access-Control-Expose-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                  example: ''
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 44
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Fri, 27 May 2016 21:24:47 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"18-Cc1VzS/SAG8zo5jZ2MF0/Q"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.8.1
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1464384347
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ValidResponse6'
              example:
                user:
                  id: 631643
      deprecated: false
  /import/{importType}:
    post:
      tags:
        - Import
      summary: Import external API specification
      description: >-
        This endpoint allows you to import external API specifications into Postman.


        Currently, this endpoint only supports the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI</a> specification, for which the `importType` will be `openapi`.


        On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.


        Supported `type`s:


        - string

        - json

        - file


        The `input` parameter should be defined based on the `type`.


        > To import a file, request body must be form-data with `type` param set to `file`.


        **Note**: Refer to examples for different scenarios.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
      operationId: ImportexternalAPIspecification
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: importType
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportexternalAPIspecificationRequest'
            example:
              type: json
              input:
                openapi: 3.0.0
                info:
                  version: 1.0.0
                  title: Swagger Petstore
                  license:
                    name: MIT
                servers:
                  - url: http://petstore.swagger.io/v1
                paths:
                  /pets:
                    get:
                      summary: List all pets
                      operationId: listPets
                      parameters:
                        - name: limit
                          in: query
                          description: limit
                          required: false
                          schema:
                            type: integer
                            format: int32
                      responses:
                        default:
                          description: unexpected error
                          content:
                            application/json:
                              schema:
                                $ref: '#/components/schemas/Error'
                components:
                  schemas:
                    Error:
                      required:
                        - code
                        - message
                      properties:
                        code:
                          type: integer
                          format: int32
                        message:
                          type: string
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success_Import-Stringifiedbody'
              example:
                collections:
                  - id: 401fcf93-9c45-4832-9616-6c6b698eeda6
                    name: Swagger Petstore
                    uid: 2282-401fcf93-9c45-4832-9616-6c6b698eeda6
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_InvalidParams'
              example:
                error:
                  name: paramMissingError
                  message: The request body is missing a value for the type parameter. Check your request and try again.
                  details:
                    param: type
      deprecated: false
  /import/exported:
    post:
      tags:
        - Import
      summary: Import exported data
      description: >-
        This endpoint allows you to import your exported Postman data.

        For more information about how you can export your data, refer <a href="https://go.postman.co/me/export">Export your Postman data.</a>


        On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.


        **Note**: Refer to examples for different scenarios.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
      operationId: Importexporteddata
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: application/json
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - type
                - input
              type: object
              properties:
                type:
                  type: string
                  example: file
                input:
                  type: string
                  description: File containing the exported collections or environments
        required: false
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success_ImporttoaspecificworkspacewithworkspaceIDpassedintheheaders'
              example:
                collections:
                  - id: e956ff02-7597-4f8d-a5e7-1c18208c9e56
                    name: Swagger Petstore
                    uid: 2282-e956ff02-7597-4f8d-a5e7-1c18208c9e56
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error_InvalidParams'
              example:
                error:
                  name: invalidParamsError
                  message: The request body has invalid values for the type parameter. Value must be one of file, string, json
                  details:
                    param: type
      deprecated: false
  /apis/{apiId}/versions:
    post:
      tags:
        - API Version
      summary: Create API Version
      description: "This call creates a new API version in the specified API.  \n\nRequest body should contain a `version` object which should have fields:\n\n<table>\n<tr>\n	<td>name</td>\n	<td>Required. Name of the API Version</td>\n</tr>\n<tr>\n	<td>source</td>\n	<td>\n		If specified, it will copy the contents of the specified api version to create a new api verison.\n		<table>\n			<tr>\n				<td>id</td>\n				<td>Required. Id of the apiversion from where the details are to be copied</td>\n			</tr>\n			<tr>\n				<td>schema</td>\n				<td>Boolean. If true then copies the schema from the specified api version</td>\n			</tr>\n			<tr>\n				<td>relations</td>\n				<td>Object. {\"&lt;relationType&gt;\": true/false}.  \n					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`\n				Relation types which should be copied over to the new api verison</td>\n			</tr>\n		</table>\n	</td>\n</tr>\n</table>\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: CreateAPIVersion
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIVersionRequest'
            example:
              version:
                name: 1.0
                source:
                  id: '{{apiVersionId}}'
                  schema: true
                  relations:
                    monitor: true
                    mock: true
                    documentation: true
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIversion'
              example:
                version:
                  id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                  name: 1.0
                  api: 2b95d07c-8379-4bd1-924f-e7e1af185284
      deprecated: false
    get:
      tags:
        - API Version
      summary: Get All API Versions
      description: >-
        This call fetches details about the all the API Versions in the specified API.


        The response will contain an array `versions` object which would be a list of all the API Version along with their details.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: GetAllAPIVersions
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllAPIversions'
              example:
                versions:
                  - id: 024660a6-c837-46ca-91d8-7e8dd7c669de
                    name: 0.1
                    summary: Summary
                    description: Description
                    createdBy: 5665
                    createdAt: 2019-02-12 19:34:49
                    updatedAt: 2019-02-12 19:34:49
                  - id: 00932d3b-20f1-454f-a77e-38b4023163ea
                    name: 0.2
                    summary: Summary
                    description: Description
                    createdBy: 5665
                    createdAt: 2019-02-12 19:34:49
                    updatedAt: 2019-02-12 19:34:49
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}:
    put:
      tags:
        - API Version
      summary: Update an API Version
      description: "This call updates an existing API Version.  \n\nRequest body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.\n\nResponse contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: UpdateanAPIVersion
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateanAPIVersionRequest'
            example:
              version:
                name: 2.0
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateanAPIversion'
              example:
                version:
                  id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
                  name: 2.0
                  createdAt: 2019-07-26T11:24:15Z
                  updatedAt: 2019-08-09T09:27:36Z
                  api: 2b95d07c-8379-4bd1-924f-e7e1af185284
                  createdBy: 12
                  updatedBy: 5665
      deprecated: false
    delete:
      tags:
        - API Version
      summary: Delete an API Version
      description: "This call deletes an existing API Version having the specified id.  \n\nResponse contains an `version` object with `id` of the API Version which was deleted.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: DeleteanAPIVersion
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteanAPIversion'
              example:
                version:
                  id: 03c17f53-7e2e-427d-b55a-006b244f29ff
      deprecated: false
    get:
      tags:
        - API Version
      summary: Get an API Version
      description: >-
        This call fetches details about the specified API Version.


        The response will contain a `version` object which would contain all the details of the API Version.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: GetanAPIVersion
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetanAPIversion'
              example:
                version:
                  id: 03c17f53-7e2e-427d-b55a-006b244f29ff
                  name: 0.1
                  api: 06e41ca3-8bea-4bc5-a726-70338b9f1940
                  schema:
                    - 3484cd1e-e00d-4c39-aea4-539663afe898
                  createdBy: 5665
                  updatedBy: 5665
                  createdAt: 2019-07-21T16:31:15Z
                  updatedAt: 2019-07-21T16:31:15Z
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/schemas:
    post:
      tags:
        - Schema
      summary: Create Schema
      description: "This call creates a new schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: CreateSchema
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: string
              example: >-
                {
                	"schema": {
                		"language": "yaml",
                		"schema": {{schema}},
                		"type": "openapi3"
                	}
                }
            example: >-
              {
              	"schema": {
              		"language": "yaml",
              		"schema": {{schema}},
              		"type": "openapi3"
              	}
              }
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Createschema'
              example:
                schema:
                  id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                  language: yaml
                  apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                  type: openapi3
                  createdBy: 5665
                  updateBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}:
    put:
      tags:
        - Schema
      summary: Update Schema
      description: "This call updates an existing schema.\n\nRequest body should contain a `schema` object which should atleast have these properties with `string` values:\n\n- **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.\n- **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.\n- **`schema`**: Optional. If passed, must be the content of the schema as a `string`.\n\nResponse contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: UpdateSchema
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: schemaId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: string
              example: >-
                {
                	"schema": {
                		"language": "json",
                		"schema": {{schema}},
                		"type": "openapi3"
                	}
                }
            example: >-
              {
              	"schema": {
              		"language": "json",
              		"schema": {{schema}},
              		"type": "openapi3"
              	}
              }
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Updateschema'
              example:
                schema:
                  id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                  language: yaml
                  apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                  type: openapi3
                  createdBy: 5665
                  updateBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
    get:
      tags:
        - Schema
      summary: Get Schema
      description: "This call fetches a single schema having the specified id.\n\nResponse contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: GetSchema
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: schemaId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Getschema'
              example:
                schema:
                  id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
                  language: yaml
                  apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
                  type: openapi3
                  createdBy: 5665
                  updateBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections:
    post:
      tags:
        - Schema
      summary: Create collection from schema
      description: "This call creates a collection and links it to an API as one or multiple relations. \n\nRequest body requires two keys:\n- `name` - Name of the collection to be created.\n- `relations` - A list of relation(s) to be created.\n\nThe allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: Createcollectionfromschema
      parameters:
        - name: workspace
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{workspaceId}}'
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: schemaId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatecollectionfromschemaRequest'
            example:
              name: My generated collection
              relations:
                - type: contracttest
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Mon, 27 Apr 2020 14:13:42 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"f7-MwDfy+rfXKvxn9z+q9h9J1oracg"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx
            x-frame-options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: SAMEORIGIN
            x-srv-span:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;s=55843a5ae1e3e829
            x-srv-trace:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;t=14cc67b6eb86260d
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 173
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Createcollectionfromschema'
              example:
                collection:
                  id: e6b0d46a-8722-4f42-ab86-f5f473187ddf
                  uid: 112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf
                relations:
                  - type: contracttest
                    id: 4b40f06a-5a6a-448f-bfcd-a6dbcb68da22
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/relations:
    get:
      tags:
        - Relations
      summary: Get linked relations
      description: "This call fetches all the relations which are linked to the specified API version along with their details.\n\nThe response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: Getlinkedrelations
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetlinkedrelationsforanAPIversion'
              example:
                relations:
                  contracttest:
                    2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
                      id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                      name: C test
                      updatedAt: 2019-08-29T10:18:11Z
                  integrationtest:
                    521b0486-ab91-4d3a-9189-43c9380a0533:
                      id: 521b0486-ab91-4d3a-9189-43c9380a0533
                      name: C1
                      updatedAt: 2019-08-29T11:40:39Z
                    a236b715-e682-460b-97b6-c1db24f7612e:
                      id: a236b715-e682-460b-97b6-c1db24f7612e
                      name: C test
                      updatedAt: 2019-08-29T10:18:11Z
                  mock:
                    4ccd755f-2c80-481b-a262-49b55e12f5e1:
                      id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
                      name: Mock
                      url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
                      updatedAt: 2019-08-20T10:18:13Z
      deprecated: false
    post:
      tags:
        - Relations
      summary: Create relations
      description: "This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. \n\n<table>\n  <tr>\n    <th>Relation</th>\n    <th>Entity ID type</th>\n  <tr>\n  <tr>\n    <td>contracttest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>integrationtest</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>documentation</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>testsuite</td>\n    <td>Collection UIDs</td>\n  </tr>\n  <tr>\n    <td>environment</td>\n    <td>Environment UIDs</td>\n  </tr>\n  <tr>\n    <td>mock</td>\n    <td>Mock IDs</td>\n  </tr>\n  <tr>\n    <td>monitor</td>\n    <td>Monitor IDs</td>\n  </tr>\n</table>\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: Createrelations
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreaterelationsRequest'
            example:
              contracttest:
                - collection-uid-1
              testsuite:
                - collection-uid-1
                - collection-uid-2
              documentation:
                - collection-uid-3
              mock:
                - mock-uid-1
        required: true
      responses:
        200:
          description: ''
          headers:
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Thu, 23 Apr 2020 09:39:36 GMT
            ETag:
              content:
                text/plain:
                  schema:
                    type: string
                  example: W/"f8-8No3oL8RvapeIu5fRUddh4X7Mx0"
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx
            x-frame-options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: SAMEORIGIN
            X-RateLimit-Limit:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 60
            X-RateLimit-Remaining:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 59
            X-RateLimit-Reset:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1587634833
            x-srv-span:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;s=e17157dc347750d4
            x-srv-trace:
              content:
                text/plain:
                  schema:
                    type: string
                  example: v=1;t=d0f4d4cdfafd0ad3
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 187
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Createmultiplerelationsfromexistingcollections'
              example:
                contracttest:
                  - 5bcece87-ca4b-4e75-a967-2a6845626164
                testsuite:
                  - e525fa71-035e-4620-acda-ce878524f1e7
                  - 17a974b2-ce79-4b95-9d3f-217d6ff7e979
                documentation:
                  - 2084eba6-a17b-4751-8f03-ea60f30ba19c
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/{relationType}:
    get:
      tags:
        - Relations
      summary: Get relations by type
      description: >-
        This call fetches all the relations by type which are linked to the specified API version along with their details.


        The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: Getrelationsbytype
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: relationType
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Getrelationsofatype'
              example:
                contracttest:
                  - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                    name: C test
                    updatedAt: 2019-08-29T10:18:11Z
                    collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
                  - id: 521b0486-ab91-4d3a-9189-43c9380a0533
                    name: C1
                    updatedAt: 2019-08-29T11:40:39Z
                    collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
      deprecated: false
  /apis/{apiId}/versions/{apiVersionId}/{relationType}/{relationId}:
    get:
      tags:
        - Relations
      summary: Get relation details
      description: "This call fetches detailed information of a relation.\n\nThe response will contain keys as shown in the example response where `collection` will contain the collection associated with the relation in <a href=\"https://schema.getpostman.com/collection/json/v2.1.0/draft-07/docs/index.html\">v2.1.0 format</a>. \n\nFor mocks, monitors, and environments, the response will contain the ID of the entity.\n \n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: Getrelationdetails
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiVersionId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: relationType
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: relationId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Getrelationsofatype1'
              example:
                id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
                name: C test
                updatedAt: 2019-08-29T10:18:11Z
                createdAt: 2019-08-29T10:18:11Z
                versionTag:
                  name: v1.0.1
                  id: 53eed8bf-1f73-4cf2-a8f0-02ae4a959f03
                collection:
                  info:
                    _postman_id: 5cfe4ee2-10d0-49e5-ac3e-a1a647c37f2d
                    name: Generated Collection - 2
                    schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
                  item:
                    - name: pets
                      item:
                        - name: List all pets
                          _postman_id: b80150b6-fb5e-4e48-88ab-de4bfba06112
                          request:
                            auth:
                              type: noauth
                            method: GET
                            header: []
                            url:
                              raw: >-
                                {{baseUrl}}/pets?limit=

                                <integer>
                              host:
                                - '{{baseUrl}}'
                              path:
                                - pets
                              query:
                                - description: How many items to return at one time (max 100)
                                  key: limit
                                  value: >2-

                                        <integer>
                          response:
                            - id: b1f75aee-327e-412f-bf5a-74c9b01ef605
                              name: A paged array of pets
                              originalRequest:
                                method: GET
                                header: []
                                url:
                                  raw: >-
                                    {{baseUrl}}/pets?limit=
                                            <integer>
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                                  query:
                                    - key: limit
                                      value: >2-

                                                    <integer>
                              status: OK
                              code: 200
                              _postman_previewlanguage: json
                              header:
                                - key: x-next
                                  value: >2-

                                                    <string>
                                  description: A link to the next page of responses
                                - key: Content-Type
                                  value: application/json
                              cookie: []
                              responseTime:
                              body: >-
                                [
                                 {
                                  "id": "
                                                    <long>",
                                  "name": "
                                                        <string>",
                                  "tag": "
                                                            <string>"
                                 },
                                 {
                                  "id": "
                                                                <long>",
                                  "name": "
                                                                    <string>",
                                  "tag": "
                                                                        <string>"
                                 }
                                ]
                            - id: f6260b7e-5c90-4b5f-98d5-41f04e04108a
                              name: unexpected error
                              originalRequest:
                                method: GET
                                header: []
                                url:
                                  raw: >-
                                    {{baseUrl}}/pets?limit=
                                                                                <integer>
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                                  query:
                                    - key: limit
                                      value: >2-

                                                                                        <integer>
                              status: Internal Server Error
                              code: 500
                              _postman_previewlanguage: json
                              header:
                                - key: Content-Type
                                  value: application/json
                              cookie: []
                              responseTime:
                              body: >-
                                {
                                 "code": "
                                                                                    <integer>",
                                 "message": "
                                                                                        <string>"
                                }
                        - name: Create a pet
                          _postman_id: a5e21c45-2389-4571-a3b3-2d0f7d6aac6a
                          request:
                            auth:
                              type: noauth
                            method: POST
                            header: []
                            url:
                              raw: '{{baseUrl}}/pets'
                              host:
                                - '{{baseUrl}}'
                              path:
                                - pets
                          response:
                            - id: a052da96-a327-4b83-8e7e-66e97249f6d3
                              name: unexpected error
                              originalRequest:
                                method: POST
                                header: []
                                url:
                                  raw: '{{baseUrl}}/pets'
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                              status: Internal Server Error
                              code: 500
                              _postman_previewlanguage: json
                              header:
                                - key: Content-Type
                                  value: application/json
                              cookie: []
                              responseTime:
                              body: >-
                                {
                                 "code": "
                                                                                            <integer>",
                                 "message": "
                                                                                                <string>"
                                }
                            - id: e1e42585-2624-4f02-bc5c-b433ef2cad2c
                              name: Null response
                              originalRequest:
                                method: POST
                                header: []
                                url:
                                  raw: '{{baseUrl}}/pets'
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                              status: Created
                              code: 201
                              _postman_previewlanguage: text
                              header:
                                - key: Content-Type
                                  value: text/plain
                              cookie: []
                              responseTime:
                              body: ''
                        - name: Info for a specific pet
                          _postman_id: 9307687f-115f-40ac-ad1d-15df249f7876
                          request:
                            auth:
                              type: noauth
                            method: GET
                            header: []
                            url:
                              raw: '{{baseUrl}}/pets/:petId'
                              host:
                                - '{{baseUrl}}'
                              path:
                                - pets
                                - :petId
                              variable:
                                - id: 2b0bb9bb-dd8c-4fd9-ac5f-4bf6a7188bdd
                                  key: petId
                                  value: >2-

                                                                                                        <string>
                                  type: string
                                  description: (Required) The id of the pet to retrieve
                          response:
                            - id: b3893689-4838-40e7-8f4c-0ad2539e4018
                              name: Expected response to a valid request
                              originalRequest:
                                method: GET
                                header: []
                                url:
                                  raw: '{{baseUrl}}/pets/:petId'
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                                    - :petId
                                  variable:
                                    - key: petId
                              status: OK
                              code: 200
                              _postman_previewlanguage: json
                              header:
                                - key: Content-Type
                                  value: application/json
                              cookie: []
                              responseTime:
                              body: >-
                                {
                                 "id": "
                                                                                                        <long>",
                                 "name": "
                                                                                                            <string>",
                                 "tag": "
                                                                                                                <string>"
                                }
                            - id: b56180aa-dbd0-40ad-8b1a-d2caaf8a1df7
                              name: unexpected error
                              originalRequest:
                                method: GET
                                header: []
                                url:
                                  raw: '{{baseUrl}}/pets/:petId'
                                  host:
                                    - '{{baseUrl}}'
                                  path:
                                    - pets
                                    - :petId
                                  variable:
                                    - key: petId
                              status: Internal Server Error
                              code: 500
                              _postman_previewlanguage: json
                              header:
                                - key: Content-Type
                                  value: application/json
                              cookie: []
                              responseTime:
                              body: >-
                                {
                                 "code": "
                                                                                                                    <integer>",
                                 "message": "
                                                                                                                        <string>"
                                }
                      _postman_id: 1d185956-a438-4248-9fa5-33598a892d23
                  variable:
                    - id: baseUrl
                      key: baseUrl
                      value: http://petstore.swagger.io/v1
                      type: string
      deprecated: false
  /apis:
    post:
      tags:
        - API
      summary: Create API
      description: "This call creates a new API with a default API Version.  \n\nRequest body should contain an `api` object which should atleast have a property `name`.\n\nResponse contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: CreateAPI
      parameters:
        - name: workspace
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{workspaceId}}'
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIRequest'
            example:
              api:
                name: Sync Service API
                summary: This is supposed to be a short summary.
                description: This is description.
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPI'
              example:
                api:
                  id: 387c2863-6ee3-4a56-8210-225f774edade
                  name: Sync API
                  summary: This is a summary
                  description: This is supposed to handle markdown *descriptions*.
                  createdBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
    get:
      tags:
        - API
      summary: Get all APIs
      description: >-
        This call fetches all the APIs present in the specified workspace


        Response contains an array named `apis` which would contain all the details of APIs present in the workspace.


        > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
      operationId: GetallAPIs
      parameters:
        - name: workspace
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: '{{workspaceId}}'
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: application/json
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetallAPIs'
              example:
                apis:
                  - id: 387c2863-6ee3-4a56-8210-225f774edade
                    name: Sync API
                    summary: This is a summary
                    description: This is a description.
                    createdBy: 5665
                    createdAt: 2019-02-12 19:34:49
                    updatedAt: 2019-02-12 19:34:49
                  - id: 387c2863-6ee3-4a56-8210-225f774edade
                    name: Sync API
                    summary: This is a summary
                    description: This is a description.
                    createdBy: 5665
                    createdAt: 2019-02-12 19:34:49
                    updatedAt: 2019-02-12 19:34:49
                  - id: 387c2863-6ee3-4a56-8210-225f774edhdh
                    name: Sync API 2
                    summary: This is a summary
                    description: This is a description.
                    createdBy: 5665
                    createdAt: 2019-02-12 19:34:49
                    updatedAt: 2019-02-12 19:34:49
      deprecated: false
  /apis/{apiId}:
    put:
      tags:
        - API
      summary: Update an API
      description: "This call updates an existing API .  \n\nRequest body should contain an `api` object which should have the fields to be updated. Only `name`, `summary` and `description` fields can be edited for an API.\n\nResponse contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: UpdateanAPI
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateanAPIRequest'
            example:
              api:
                name: New name
                description: This is an updated Description
        required: true
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateanAPI'
              example:
                api:
                  id: 387c2863-6ee3-4a56-8210-225f774edade
                  name: Sync API
                  summary: This is a summary
                  description: This is a description.
                  createdBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
    delete:
      tags:
        - API
      summary: Delete an API
      description: "This call deletes an existing API having the specified id.  \n\nResponse contains an `api` object with `id` of the API which was deleted.\n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: DeleteanAPI
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteanAPI'
              example:
                api:
                  id: 387c2863-6ee3-4a56-8210-225f774edade
      deprecated: false
    get:
      tags:
        - API
      summary: Single API
      description: "This call fetches a single API having the specified id.\n\nResponse contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc. \n\n> Requires <a href=\"#authentication\">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter."
      operationId: SingleAPI
      parameters:
        - name: x-api-key
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: apiId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        200:
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetsingleAPI'
              example:
                api:
                  id: 387c2863-6ee3-4a56-8210-225f774edade
                  name: Sync API
                  summary: This is a summary
                  description: This is a description.This is a description.
                  createdBy: 5665
                  createdAt: 2019-02-12 19:34:49
                  updatedAt: 2019-02-12 19:34:49
      deprecated: false
components:
  schemas:
    ValidResponse:
      title: ValidResponse
      required:
        - collections
      type: object
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
          description: ''
      example:
        collections:
          - id: dac5eac9-148d-a32e-b76b-3edee9da28f7
            name: Cloud API
            owner: 631643
            uid: 631643-dac5eac9-148d-a32e-b76b-3edee9da28f7
          - id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
            name: Sample Collection
            owner: 631643
            uid: 631643-f2e66c2e-5297-e4a5-739e-20cbb90900e3
          - id: f695cab7-6878-eb55-7943-ad88e1ccfd65
            name: Postman Echo
            owner: 631643
            uid: 631643-f695cab7-6878-eb55-7943-ad88e1ccfd65
    Collection:
      title: Collection
      required:
        - id
        - name
        - owner
        - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        uid:
          type: string
      example:
        id: dac5eac9-148d-a32e-b76b-3edee9da28f7
        name: Cloud API
        owner: 631643
        uid: 631643-dac5eac9-148d-a32e-b76b-3edee9da28f7
    ValidResponse1:
      title: ValidResponse1
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection1'
      example:
        collection:
          variables: []
          info:
            name: Sample Collection
            _postman_id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
            description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
            schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
          item:
            - id: 82ee981b-e19f-962a-401e-ea34ebfb4848
              name: Request Headers
              event:
                - listen: test
                  script:
                    type: text/javascript
                    exec: >+
                      var responseJSON;

                      try {
                          tests["Body contains headers"] = responseBody.has("headers");
                          responseJSON = JSON.parse(responseBody);
                          tests["Header contains host"] = "host" in responseJSON.headers;
                          tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                      }

                      catch (e) { }



              request:
                url: https://echo.getpostman.com/headers
                method: GET
                header:
                  - key: my-sample-header
                    value: Lorem ipsum dolor sit amet
                    description: ''
                body:
                  mode: formdata
                  formdata: []
                description: ''
              response: []
    Collection1:
      title: Collection1
      required:
        - variables
        - info
        - item
      type: object
      properties:
        variables:
          type: array
          items:
            type: string
          description: ''
        info:
          $ref: '#/components/schemas/Info'
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          description: ''
      example:
        variables: []
        info:
          name: Sample Collection
          _postman_id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
          description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
          schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
        item:
          - id: 82ee981b-e19f-962a-401e-ea34ebfb4848
            name: Request Headers
            event:
              - listen: test
                script:
                  type: text/javascript
                  exec: >+
                    var responseJSON;

                    try {
                        tests["Body contains headers"] = responseBody.has("headers");
                        responseJSON = JSON.parse(responseBody);
                        tests["Header contains host"] = "host" in responseJSON.headers;
                        tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                    }

                    catch (e) { }



            request:
              url: https://echo.getpostman.com/headers
              method: GET
              header:
                - key: my-sample-header
                  value: Lorem ipsum dolor sit amet
                  description: ''
              body:
                mode: formdata
                formdata: []
              description: ''
            response: []
    Info:
      title: Info
      required:
        - name
        - _postman_id
        - description
        - schema
      type: object
      properties:
        name:
          type: string
        _postman_id:
          type: string
        description:
          type: string
        schema:
          type: string
      example:
        name: Sample Collection
        _postman_id: f2e66c2e-5297-e4a5-739e-20cbb90900e3
        description: This is a sample collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.
        schema: https://schema.getpostman.com/json/collection/v2.0.0/collection.json
    Item:
      title: Item
      required:
        - id
        - name
        - event
        - request
        - response
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        event:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: ''
        request:
          $ref: '#/components/schemas/Request'
        response:
          type: array
          items:
            type: string
          description: ''
      example:
        id: 82ee981b-e19f-962a-401e-ea34ebfb4848
        name: Request Headers
        event:
          - listen: test
            script:
              type: text/javascript
              exec: >+
                var responseJSON;

                try {
                    tests["Body contains headers"] = responseBody.has("headers");
                    responseJSON = JSON.parse(responseBody);
                    tests["Header contains host"] = "host" in responseJSON.headers;
                    tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
                }

                catch (e) { }



        request:
          url: https://echo.getpostman.com/headers
          method: GET
          header:
            - key: my-sample-header
              value: Lorem ipsum dolor sit amet
              description: ''
          body:
            mode: formdata
            formdata: []
          description: ''
        response: []
    Event:
      title: Event
      required:
        - listen
        - script
      type: object
      properties:
        listen:
          type: string
        script:
          $ref: '#/components/schemas/Script'
      example:
        listen: test
        script:
          type: text/javascript
          exec: >+
            var responseJSON;

            try {
                tests["Body contains headers"] = responseBody.has("headers");
                responseJSON = JSON.parse(responseBody);
                tests["Header contains host"] = "host" in responseJSON.headers;
                tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
            }

            catch (e) { }



    Script:
      title: Script
      required:
        - type
        - exec
      type: object
      properties:
        type:
          type: string
        exec:
          type: string
      example:
        type: text/javascript
        exec: >+
          var responseJSON;

          try {
              tests["Body contains headers"] = responseBody.has("headers");
              responseJSON = JSON.parse(responseBody);
              tests["Header contains host"] = "host" in responseJSON.headers;
              tests["Header contains test parameter sent as part of request header"] = "my-sample-header" in responseJSON.headers;
          }

          catch (e) { }



    Request:
      title: Request
      required:
        - url
        - method
        - header
        - body
        - description
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        header:
          type: array
          items:
            $ref: '#/components/schemas/Header'
          description: ''
        body:
          $ref: '#/components/schemas/Body'
        description:
          type: string
      example:
        url: https://echo.getpostman.com/headers
        method: GET
        header:
          - key: my-sample-header
            value: Lorem ipsum dolor sit amet
            description: ''
        body:
          mode: formdata
          formdata: []
        description: ''
    Header:
      title: Header
      required:
        - key
        - value
        - description
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        description:
          type: string
      example:
        key: my-sample-header
        value: Lorem ipsum dolor sit amet
        description: ''
    Body:
      title: Body
      required:
        - mode
        - formdata
      type: object
      properties:
        mode:
          type: string
        formdata:
          type: array
          items:
            type: string
          description: ''
      example:
        mode: formdata
        formdata: []
    CreateCollectionRequest:
      title: CreateCollectionRequest
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection2'
      example:
        collection:
          info:
            name: Sample Collection {{$randomInt}}
            description: This is just a sample collection.
            schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
          item:
            - name: This is a folder
              item:
                - name: Sample POST Request
                  request:
                    url: https://postman-echo.com/post
                    method: POST
                    header:
                      - key: Content-Type
                        value: application/json
                    body:
                      mode: raw
                      raw: '{"data": "123"}'
                    description: This is a sample POST Request
            - name: Sample GET Request
              request:
                url: https://postman-echo/get
                method: GET
                description: This is a sample GET Request
    Collection2:
      title: Collection2
      required:
        - info
        - item
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info1'
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item1'
          description: ''
      example:
        info:
          name: Sample Collection {{$randomInt}}
          description: This is just a sample collection.
          schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
        item:
          - name: This is a folder
            item:
              - name: Sample POST Request
                request:
                  url: https://postman-echo.com/post
                  method: POST
                  header:
                    - key: Content-Type
                      value: application/json
                  body:
                    mode: raw
                    raw: '{"data": "123"}'
                  description: This is a sample POST Request
          - name: Sample GET Request
            request:
              url: https://postman-echo/get
              method: GET
              description: This is a sample GET Request
    Info1:
      title: Info1
      required:
        - name
        - description
        - schema
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        schema:
          type: string
      example:
        name: Sample Collection {{$randomInt}}
        description: This is just a sample collection.
        schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
    Item1:
      title: Item1
      required:
        - name
      type: object
      properties:
        name:
          type: string
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item2'
          description: ''
        request:
          $ref: '#/components/schemas/Request2'
      example:
        name: This is a folder
        item:
          - name: Sample POST Request
            request:
              url: https://postman-echo.com/post
              method: POST
              header:
                - key: Content-Type
                  value: application/json
              body:
                mode: raw
                raw: '{"data": "123"}'
              description: This is a sample POST Request
    Item2:
      title: Item2
      required:
        - name
        - request
      type: object
      properties:
        name:
          type: string
        request:
          $ref: '#/components/schemas/Request1'
      example:
        name: Sample POST Request
        request:
          url: https://postman-echo.com/post
          method: POST
          header:
            - key: Content-Type
              value: application/json
          body:
            mode: raw
            raw: '{"data": "123"}'
          description: This is a sample POST Request
    Request1:
      title: Request1
      required:
        - url
        - method
        - header
        - body
        - description
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        header:
          type: array
          items:
            $ref: '#/components/schemas/Header1'
          description: ''
        body:
          $ref: '#/components/schemas/Body1'
        description:
          type: string
      example:
        url: https://postman-echo.com/post
        method: POST
        header:
          - key: Content-Type
            value: application/json
        body:
          mode: raw
          raw: '{"data": "123"}'
        description: This is a sample POST Request
    Header1:
      title: Header1
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      example:
        key: Content-Type
        value: application/json
    Body1:
      title: Body1
      required:
        - mode
        - raw
      type: object
      properties:
        mode:
          type: string
        raw:
          type: string
      example:
        mode: raw
        raw: '{"data": "123"}'
    Request2:
      title: Request2
      required:
        - url
        - method
        - description
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        description:
          type: string
      example:
        url: https://postman-echo/get
        method: GET
        description: This is a sample GET Request
    Error:
      title: Error
      required:
        - name
        - message
      type: object
      properties:
        name:
          type: string
        message:
          type: string
      example:
        name: malformedRequestError
        message: 'Missing required property: name at info'
    CreateCollectioninaWorkspace:
      title: CreateCollectioninaWorkspace
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection3'
      example:
        collection:
          id: 2412a72c-1d8e-491b-aced-93809c0e94e9
          name: Sample Collection
          uid: 5852-2412a72c-1d8e-491b-aced-93809c0e94e9
    Collection3:
      title: Collection3
      required:
        - id
        - name
        - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
      example:
        id: 2412a72c-1d8e-491b-aced-93809c0e94e9
        name: Sample Collection
        uid: 5852-2412a72c-1d8e-491b-aced-93809c0e94e9
    Error1:
      title: Error1
      required:
        - name
        - message
        - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/Details'
      example:
        name: instanceFoundError
        message: The specified item already exists.
        details:
          item: collection
          id: ac03df1d-90f0-401d-aa57-39c395253c80
    Details:
      title: Details
      required:
        - item
        - id
      type: object
      properties:
        item:
          type: string
        id:
          type: string
      example:
        item: collection
        id: ac03df1d-90f0-401d-aa57-39c395253c80
    UpdateCollectionRequest:
      title: UpdateCollectionRequest
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection4'
      example:
        collection:
          info:
            name: Sample Collection {{$randomInt}}
            description: This is just a sample collection.
            _postman_id: 174bad7c-07e3-45f3-914f-36cf84e5586f
            schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
          item:
            - name: This is a folder
              item:
                - name: Sample POST Request
                  request:
                    url: https://postman-echo.com/post
                    method: POST
                    header:
                      - key: Content-Type
                        value: application/json
                    body:
                      mode: raw
                      raw: '{"data": "123"}'
                    description: This is a sample POST Request
            - name: Sample GET Request
              request:
                url: https://postman-echo/get
                method: GET
                description: This is a sample GET Request
    Collection4:
      title: Collection4
      required:
        - info
        - item
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info'
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item1'
          description: ''
      example:
        info:
          name: Sample Collection {{$randomInt}}
          description: This is just a sample collection.
          _postman_id: 174bad7c-07e3-45f3-914f-36cf84e5586f
          schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
        item:
          - name: This is a folder
            item:
              - name: Sample POST Request
                request:
                  url: https://postman-echo.com/post
                  method: POST
                  header:
                    - key: Content-Type
                      value: application/json
                  body:
                    mode: raw
                    raw: '{"data": "123"}'
                  description: This is a sample POST Request
          - name: Sample GET Request
            request:
              url: https://postman-echo/get
              method: GET
              description: This is a sample GET Request
    CollectionUpdated:
      title: CollectionUpdated
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection3'
      example:
        collection:
          id: 1d3daef4-2037-4584-ab86-bafd8c8f8a55
          name: Sample Collection
          uid: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
    CollectionNotFound:
      title: CollectionNotFound
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error1'
      example:
        error:
          name: instanceNotFoundError
          message: The specified item does not exist.
          details:
            item: collection
            id: 1d3daef4-2037-4584-ab86-bafd8c8f8a54
    CollectionDeleted:
      title: CollectionDeleted
      required:
        - collection
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection6'
      example:
        collection:
          id: a14c6da7-afba-4a84-bf22-4febbaaced6c
          uid: 5852-a14c6da7-afba-4a84-bf22-4febbaaced6c
    Collection6:
      title: Collection6
      required:
        - id
        - uid
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
      example:
        id: a14c6da7-afba-4a84-bf22-4febbaaced6c
        uid: 5852-a14c6da7-afba-4a84-bf22-4febbaaced6c
    CreateaForkRequest:
      title: CreateaForkRequest
      required:
        - name
      type: object
      properties:
        name:
          type: string
      example:
        name: Fork name
    MergeaForkRequest:
      title: MergeaForkRequest
      required:
        - strategy
        - source
        - destination
      type: object
      properties:
        strategy:
          type: string
        source:
          type: string
        destination:
          type: string
      example:
        strategy: deleteSource
        source: '{{source_collection_uid}}'
        destination: '{{destination_collection_uid}}'
    ValidResponse2:
      title: ValidResponse2
      required:
        - environments
      type: object
      properties:
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
          description: ''
      example:
        environments:
          - id: 357668d2-84f1-2264-438b-113095359f80
            name: Postman Cloud API
            owner: 631643
            uid: 631643-357668d2-84f1-2264-438b-113095359f80
          - id: 84a119b6-f4b1-9120-5f11-a73b17818d70
            name: Postman Cloud API.template
            owner: 631643
            uid: 631643-84a119b6-f4b1-9120-5f11-a73b17818d70
    Environment:
      title: Environment
      required:
        - id
        - name
        - owner
        - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        uid:
          type: string
      example:
        id: 357668d2-84f1-2264-438b-113095359f80
        name: Postman Cloud API
        owner: 631643
        uid: 631643-357668d2-84f1-2264-438b-113095359f80
    ValidResponse3:
      title: ValidResponse3
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment1'
      example:
        environment:
          id: 84a119b6-f4b1-9120-5f11-a73b17818d70
          name: Postman Cloud API.template
          values:
            - key: postman_api_key
              value: ''
              type: text
              enabled: true
              hovered: false
    Environment1:
      title: Environment1
      required:
        - id
        - name
        - values
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
          description: ''
      example:
        id: 84a119b6-f4b1-9120-5f11-a73b17818d70
        name: Postman Cloud API.template
        values:
          - key: postman_api_key
            value: ''
            type: text
            enabled: true
            hovered: false
    Value:
      title: Value
      required:
        - key
        - value
        - type
        - enabled
        - hovered
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        type:
          type: string
        enabled:
          type: boolean
        hovered:
          type: boolean
      example:
        key: postman_api_key
        value: ''
        type: text
        enabled: true
        hovered: false
    CreateEnvironmentRequest:
      title: CreateEnvironmentRequest
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment2'
      example:
        environment:
          name: Sample Environment Name (required)
          values:
            - key: variable_name_1
              value: The value of the variable
            - key: variable_name_2
              value: ''
    Environment2:
      title: Environment2
      required:
        - name
        - values
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value1'
          description: ''
      example:
        name: Sample Environment Name (required)
        values:
          - key: variable_name_1
            value: The value of the variable
          - key: variable_name_2
            value: ''
    Value1:
      title: Value1
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      example:
        key: variable_name_1
        value: The value of the variable
    CreateEnvironmentinaWorkspace:
      title: CreateEnvironmentinaWorkspace
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment3'
      example:
        environment:
          id: f158266e-306b-4702-a2b9-e4ede7878b7a
          name: Sample Environment Name (required)
          uid: 5665-f158266e-306b-4702-a2b9-e4ede7878b7a
    Environment3:
      title: Environment3
      required:
        - id
        - name
        - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
      example:
        id: f158266e-306b-4702-a2b9-e4ede7878b7a
        name: Sample Environment Name (required)
        uid: 5665-f158266e-306b-4702-a2b9-e4ede7878b7a
    UpdateEnvironmentRequest:
      title: UpdateEnvironmentRequest
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment2'
      example:
        environment:
          name: New Name
          values:
            - key: name
              value: Bruce Wayne
            - key: occupation
              value: Vigilante
    SuccessfulResponse:
      title: SuccessfulResponse
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment3'
      example:
        environment:
          id: 357668d2-84f1-2264-438b-113095359f80
          name: New Name
          uid: 631643-357668d2-84f1-2264-438b-113095359f80
    EnvironmentDeleted:
      title: EnvironmentDeleted
      required:
        - environment
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/Environment6'
      example:
        environment:
          id: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
          uid: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
    Environment6:
      title: Environment6
      required:
        - id
        - uid
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
      example:
        id: 4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
        uid: 5852-4dfb28a4-9a6c-4ce4-b31a-17c26a8b2cce
    SuccessfulResponse1:
      title: SuccessfulResponse1
      required:
        - mocks
      type: object
      properties:
        mocks:
          type: array
          items:
            $ref: '#/components/schemas/Mock'
          description: ''
      example:
        mocks:
          - id: 0fca2246-c108-41f5-8454-cc032def329f
            owner: 1679925
            uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
            collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
            environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
            mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
          - id: 2c624389-705a-4e66-9777-05314b431796
            owner: 1679925
            uid: 1679925-2c624389-705a-4e66-9777-05314b431796
            collection: 1679925-37294bb0-e27b-5e52-93ae-c07dd445216d
            mockUrl: https://2c624389-705a-4e66-9777-05314b431796.mock.pstmn.io
    Mock:
      title: Mock
      required:
        - id
        - owner
        - uid
        - collection
        - mockUrl
      type: object
      properties:
        id:
          type: string
        owner:
          type: string
        uid:
          type: string
        collection:
          type: string
        environment:
          type: string
        mockUrl:
          type: string
      example:
        id: 0fca2246-c108-41f5-8454-cc032def329f
        owner: 1679925
        uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
        collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
        environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
        mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
    SuccessfulResponse2:
      title: SuccessfulResponse2
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock1'
      example:
        mock:
          id: 0fca2246-c108-41f5-8454-cc032def329f
          owner: 1679925
          uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
          collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
          environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
          mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
    Mock1:
      title: Mock1
      required:
        - id
        - owner
        - uid
        - collection
        - environment
        - mockUrl
      type: object
      properties:
        id:
          type: string
        owner:
          type: string
        uid:
          type: string
        collection:
          type: string
        environment:
          type: string
        mockUrl:
          type: string
      example:
        id: 0fca2246-c108-41f5-8454-cc032def329f
        owner: 1679925
        uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
        collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
        environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
        mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
    CreateMockRequest:
      title: CreateMockRequest
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock2'
      example:
        mock:
          collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
          environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
    Mock2:
      title: Mock2
      required:
        - collection
        - environment
      type: object
      properties:
        collection:
          type: string
        environment:
          type: string
      example:
        collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
        environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
    CreateMockinaWorkspace:
      title: CreateMockinaWorkspace
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock1'
      example:
        mock:
          id: 0fca2246-c108-41f5-8454-cc032def329f
          owner: 1679925
          uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
          collection: 1679925-39fee52f-b806-3ffa-1173-00a6f5b183dc
          environment: 1679925-0b9e9f15-3208-a2b1-22e0-d58392f01524
          mockUrl: https://0fca2246-c108-41f5-8454-cc032def329f.mock.pstmn.io
    UpdateMockRequest:
      title: UpdateMockRequest
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock4'
      example:
        mock:
          name: My Mock Server
          environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
          description: example describing update mock description
          private: false
          versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
    Mock4:
      title: Mock4
      required:
        - name
        - environment
        - description
        - private
        - versionTag
      type: object
      properties:
        name:
          type: string
        environment:
          type: string
        description:
          type: string
        private:
          type: boolean
        versionTag:
          type: string
      example:
        name: My Mock Server
        environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
        description: example describing update mock description
        private: false
        versionTag: abf07d3d-f8ec-47d4-8015-9fe83078b4ec
    successResponse:
      title: successResponse
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock5'
      example:
        mock:
          id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
          owner: 11582779
          uid: 11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723
          collection: 11582779-fd6797e2-de6b-4699-975c-85290e4c2499
          mockUrl: https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io
          name: My Mock Server
          config:
            headers: []
            matchBody: false
            matchQueryParams: true
            matchWildcards: true
          environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
    Mock5:
      title: Mock5
      required:
        - id
        - owner
        - uid
        - collection
        - mockUrl
        - name
        - config
        - environment
      type: object
      properties:
        id:
          type: string
        owner:
          type: string
        uid:
          type: string
        collection:
          type: string
        mockUrl:
          type: string
        name:
          type: string
        config:
          $ref: '#/components/schemas/Config'
        environment:
          type: string
      example:
        id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
        owner: 11582779
        uid: 11582779-06040138-dd6b-4cce-9a02-7e1c1ab59723
        collection: 11582779-fd6797e2-de6b-4699-975c-85290e4c2499
        mockUrl: https://06040138-dd6b-4cce-9a02-7e1c1ab59723.mock.pstmn.io
        name: My Mock Server
        config:
          headers: []
          matchBody: false
          matchQueryParams: true
          matchWildcards: true
        environment: 11582779-ac1b6608-deb7-4c05-9d48-ee775aabfc19
    Config:
      title: Config
      required:
        - headers
        - matchBody
        - matchQueryParams
        - matchWildcards
      type: object
      properties:
        headers:
          type: array
          items:
            type: string
          description: ''
        matchBody:
          type: boolean
        matchQueryParams:
          type: boolean
        matchWildcards:
          type: boolean
      example:
        headers: []
        matchBody: false
        matchQueryParams: true
        matchWildcards: true
    SuccessfulResponse3:
      title: SuccessfulResponse3
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock6'
      example:
        mock:
          id: 0fca2246-c108-41f5-8454-cc032def329f
          uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
    Mock6:
      title: Mock6
      required:
        - id
        - uid
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
      example:
        id: 0fca2246-c108-41f5-8454-cc032def329f
        uid: 1679925-0fca2246-c108-41f5-8454-cc032def329f
    SuccessResponse1:
      title: SuccessResponse1
      required:
        - mock
      type: object
      properties:
        mock:
          $ref: '#/components/schemas/Mock7'
      example:
        mock:
          id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
    Mock7:
      title: Mock7
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 06040138-dd6b-4cce-9a02-7e1c1ab59723
    SuccessfulResponse4:
      title: SuccessfulResponse4
      required:
        - monitors
      type: object
      properties:
        monitors:
          type: array
          items:
            $ref: '#/components/schemas/Monitor'
          description: ''
      example:
        monitors:
          - id: 1e6b6c77-2031-42d0-9948-76d7251b2dd1
            name: Batman & Sherlock Holmes Monitor
            uid: 5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1
            owner: 5852
          - id: 1e6b6cb7-f13d-4000-acb7-0695757174a8
            name: Team Level Monitor
            uid: 5886-1e6b6cb7-f13d-4000-acb7-0695757174a8
            owner: 5886
          - id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
            name: Postman Echo Monitor
            uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
            owner: 5852
    Monitor:
      title: Monitor
      required:
        - id
        - name
        - uid
        - owner
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
        owner:
          type: string
      example:
        id: 1e6b6c77-2031-42d0-9948-76d7251b2dd1
        name: Batman & Sherlock Holmes Monitor
        uid: 5852-1e6b6c77-2031-42d0-9948-76d7251b2dd1
        owner: 5852
    SuccessfulResponse5:
      title: SuccessfulResponse5
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor1'
      example:
        monitor:
          id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
          name: Postman Echo Monitor
          uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
          owner: 5852
          collectionUid: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
          environmentUid: 5851-8d05dd85-222c-1452-553b-e76a531b71ed
          options:
            strictSSL: true
            followRedirects: true
            requestTimeout:
            requestDelay: 0
          notifications:
            onError:
              - email: john.appleseed@example.com
            onFailure:
              - email: john.appleseed@example.com
          distribution: []
          schedule:
            cron: 0 0 * * * *
            timezone: Asia/Calcutta
            nextRun: 2016-11-30T09:30:00Z
          lastRun:
            status: failed
            startedAt: 2020-03-25T15:45:29.218Z
            finishedAt: 2020-03-25T15:45:31.34Z
            stats:
              assertions:
                total: 8
                failed: 1
              requests:
                total: 4
    Monitor1:
      title: Monitor1
      required:
        - id
        - name
        - uid
        - owner
        - collectionUid
        - environmentUid
        - options
        - notifications
        - distribution
        - schedule
        - lastRun
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
        owner:
          type: string
        collectionUid:
          type: string
        environmentUid:
          type: string
        options:
          $ref: '#/components/schemas/Options'
        notifications:
          $ref: '#/components/schemas/Notifications'
        distribution:
          type: array
          items:
            type: string
          description: ''
        schedule:
          $ref: '#/components/schemas/Schedule'
        lastRun:
          $ref: '#/components/schemas/LastRun'
      example:
        id: 1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        name: Postman Echo Monitor
        uid: 5852-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1
        owner: 5852
        collectionUid: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
        environmentUid: 5851-8d05dd85-222c-1452-553b-e76a531b71ed
        options:
          strictSSL: true
          followRedirects: true
          requestTimeout:
          requestDelay: 0
        notifications:
          onError:
            - email: john.appleseed@example.com
          onFailure:
            - email: john.appleseed@example.com
        distribution: []
        schedule:
          cron: 0 0 * * * *
          timezone: Asia/Calcutta
          nextRun: 2016-11-30T09:30:00Z
        lastRun:
          status: failed
          startedAt: 2020-03-25T15:45:29.218Z
          finishedAt: 2020-03-25T15:45:31.34Z
          stats:
            assertions:
              total: 8
              failed: 1
            requests:
              total: 4
    Options:
      title: Options
      required:
        - strictSSL
        - followRedirects
        - requestTimeout
        - requestDelay
      type: object
      properties:
        strictSSL:
          type: boolean
        followRedirects:
          type: boolean
        requestTimeout:
          type: string
          nullable: true
        requestDelay:
          type: integer
          format: int32
      example:
        strictSSL: true
        followRedirects: true
        requestTimeout:
        requestDelay: 0
    Notifications:
      title: Notifications
      required:
        - onError
        - onFailure
      type: object
      properties:
        onError:
          type: array
          items:
            $ref: '#/components/schemas/OnError'
          description: ''
        onFailure:
          type: array
          items:
            $ref: '#/components/schemas/OnFailure'
          description: ''
      example:
        onError:
          - email: john.appleseed@example.com
        onFailure:
          - email: john.appleseed@example.com
    OnError:
      title: OnError
      required:
        - email
      type: object
      properties:
        email:
          type: string
      example:
        email: john.appleseed@example.com
    OnFailure:
      title: OnFailure
      required:
        - email
      type: object
      properties:
        email:
          type: string
      example:
        email: john.appleseed@example.com
    Schedule:
      title: Schedule
      required:
        - cron
        - timezone
        - nextRun
      type: object
      properties:
        cron:
          type: string
        timezone:
          type: string
        nextRun:
          type: string
      example:
        cron: 0 0 * * * *
        timezone: Asia/Calcutta
        nextRun: 2016-11-30T09:30:00Z
    LastRun:
      title: LastRun
      required:
        - status
        - startedAt
        - finishedAt
        - stats
      type: object
      properties:
        status:
          type: string
        startedAt:
          type: string
        finishedAt:
          type: string
        stats:
          $ref: '#/components/schemas/Stats'
      example:
        status: failed
        startedAt: 2020-03-25T15:45:29.218Z
        finishedAt: 2020-03-25T15:45:31.34Z
        stats:
          assertions:
            total: 8
            failed: 1
          requests:
            total: 4
    Stats:
      title: Stats
      required:
        - assertions
        - requests
      type: object
      properties:
        assertions:
          $ref: '#/components/schemas/Assertions'
        requests:
          $ref: '#/components/schemas/Requests'
      example:
        assertions:
          total: 8
          failed: 1
        requests:
          total: 4
    Assertions:
      title: Assertions
      required:
        - total
        - failed
      type: object
      properties:
        total:
          type: integer
          format: int32
        failed:
          type: integer
          format: int32
      example:
        total: 8
        failed: 1
    Requests:
      title: Requests
      required:
        - total
      type: object
      properties:
        total:
          type: integer
          format: int32
      example:
        total: 4
    CreateMonitorRequest:
      title: CreateMonitorRequest
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor2'
      example:
        monitor:
          name: This is a Monitor Name
          schedule:
            cron: 0 0 * * *
            timezone: Asia/Kolkata
          collection: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
          environment: 5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef
    Monitor2:
      title: Monitor2
      required:
        - name
        - schedule
        - collection
        - environment
      type: object
      properties:
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule1'
        collection:
          type: string
        environment:
          type: string
      example:
        name: This is a Monitor Name
        schedule:
          cron: 0 0 * * *
          timezone: Asia/Kolkata
        collection: 5852-8d05dd85-222c-1452-553b-e76a531b71ed
        environment: 5852-8a4c21ea-2a36-40d1-a82d-d717fac9d6ef
    Schedule1:
      title: Schedule1
      required:
        - cron
        - timezone
      type: object
      properties:
        cron:
          type: string
        timezone:
          type: string
      example:
        cron: 0 0 * * *
        timezone: Asia/Kolkata
    CronPatternNotAllowed:
      title: CronPatternNotAllowed
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error11'
      example:
        error:
          name: cronPatternNotAllowedError
          message: The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.
          details:
            pattern: '* * * * *'
    Error11:
      title: Error11
      required:
        - name
        - message
        - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/Details3'
      example:
        name: cronPatternNotAllowedError
        message: The specified cron pattern is not allowed. Please check https://monitor.getpostman.com for the allowed schedules.
        details:
          pattern: '* * * * *'
    Details3:
      title: Details3
      required:
        - pattern
      type: object
      properties:
        pattern:
          type: string
      example:
        pattern: '* * * * *'
    Error12:
      title: Error12
      required:
        - name
        - message
        - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/Details4'
      example:
        name: invalidUidError
        message: The specified uid is invalid.
        details:
          param: collection
          uid: 8d05dd85-222c-1452-553b-e76a531b71ed
    Details4:
      title: Details4
      required:
        - param
        - uid
      type: object
      properties:
        param:
          type: string
        uid:
          type: string
      example:
        param: collection
        uid: 8d05dd85-222c-1452-553b-e76a531b71ed
    MonitorCreated:
      title: MonitorCreated
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor3'
      example:
        monitor:
          id: 1e6b6dfd-7ba4-4590-9ee1-5948102d7797
          name: Monitor Name
          uid: 5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797
    Monitor3:
      title: Monitor3
      required:
        - id
        - name
        - uid
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uid:
          type: string
      example:
        id: 1e6b6dfd-7ba4-4590-9ee1-5948102d7797
        name: Monitor Name
        uid: 5852-1e6b6dfd-7ba4-4590-9ee1-5948102d7797
    Error13:
      title: Error13
      required:
        - name
        - message
        - details
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        details:
          $ref: '#/components/schemas/Details5'
      example:
        name: paramMissingError
        message: Parameter is missing in the request.
        details:
          param: monitor
    Details5:
      title: Details5
      required:
        - param
      type: object
      properties:
        param:
          type: string
      example:
        param: monitor
    UpdateMonitorRequest:
      title: UpdateMonitorRequest
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor4'
      example:
        monitor:
          name: Updated Monitor Name
          schedule:
            cron: '*/5 * * * *'
            timezone: America/Chicago
    Monitor4:
      title: Monitor4
      required:
        - name
        - schedule
      type: object
      properties:
        name:
          type: string
        schedule:
          $ref: '#/components/schemas/Schedule1'
      example:
        name: Updated Monitor Name
        schedule:
          cron: '*/5 * * * *'
          timezone: America/Chicago
    MonitorUpdated:
      title: MonitorUpdated
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor3'
      example:
        monitor:
          id: 1e6b6e2a-c2ad-4090-b750-0df4e6624352
          name: Updated Monitor Name
          uid: 5852-1e6b6e2a-c2ad-4090-b750-0df4e6624352
    MonitorDeleted:
      title: MonitorDeleted
      required:
        - monitor
      type: object
      properties:
        monitor:
          $ref: '#/components/schemas/Monitor6'
      example:
        monitor:
          id: 1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
          uid: 5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
    Monitor6:
      title: Monitor6
      required:
        - id
        - uid
      type: object
      properties:
        id:
          type: string
        uid:
          type: string
      example:
        id: 1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
        uid: 5852-1e6b8957-35f9-42a0-8d2f-f03d7085b3d2
    MonitorRunwithErrors:
      title: MonitorRunwithErrors
      required:
        - run
      type: object
      properties:
        run:
          $ref: '#/components/schemas/Run'
    Run:
      title: Run
      required:
        - info
        - stats
        - executions
        - failures
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info3'
        stats:
          $ref: '#/components/schemas/Stats1'
        executions:
          type: array
          items:
            $ref: '#/components/schemas/Execution'
          description: ''
        failures:
          type: array
          items:
            $ref: '#/components/schemas/Failure'
          description: ''
    Info3:
      title: Info3
      required:
        - jobId
        - monitorId
        - name
        - collectionUid
        - status
        - startedAt
        - finishedAt
      type: object
      properties:
        jobId:
          type: string
        monitorId:
          type: string
        name:
          type: string
        collectionUid:
          type: string
        status:
          type: string
        startedAt:
          type: string
        finishedAt:
          type: string
      example:
        jobId: 1e6ba2e3-1aaf-4c10-bd5f-905943284b2a
        monitorId: 1e6b8970-fd13-4480-b011-b3b3e3cd271d
        name: 'Sample Collection monitor 1 #56'
        collectionUid: 5852-1d3daef4-2037-4584-ab86-bafd8c8f8a55
        status: failed
        startedAt: 2016-12-04T14:30:25Z
        finishedAt: 2016-12-04T14:30:26Z
    Stats1:
      title: Stats1
      required:
        - assertions
        - requests
      type: object
      properties:
        assertions:
          $ref: '#/components/schemas/Assertions'
        requests:
          $ref: '#/components/schemas/Requests1'
      example:
        assertions:
          total: 1
          failed: 1
        requests:
          total: 3
          failed: 1
    Requests1:
      title: Requests1
      required:
        - total
        - failed
      type: object
      properties:
        total:
          type: integer
          format: int32
        failed:
          type: integer
          format: int32
      example:
        total: 3
        failed: 1
    Execution:
      title: Execution
      required:
        - id
        - item
        - request
        - response
      type: object
      properties:
        id:
          type: integer
          format: int32
        item:
          $ref: '#/components/schemas/Item5'
        request:
          $ref: '#/components/schemas/Request5'
        response:
          $ref: '#/components/schemas/Response'
        assertions:
          $ref: '#/components/schemas/Assertions2'
      example:
        id: 1
        item:
          id: b5e8d7dd-909c-4ba7-aef4-8609bc50b586
          name: Sample POST Request
        request:
          method: POST
          url: echo.getpostman.com/post
          headers:
            content-type: application/json
            accept: '*/*'
            accept-encoding: gzip, deflate
            content-length: 18
          body:
            contentLength: 18
            mode: raw
          timestamp: 2016-12-04T14:30:26.025Z
        response:
          code: 200
          body:
            contentLength: 298
          responseTime: 26
          responseSize: 298
          headers:
            date: Sun, 04 Dec 2016 14:30:26 GMT
            content-type: application/json; charset=utf-8
            transfer-encoding: chunked
            connection: keep-alive
            content-encoding: gzip
    Item5:
      title: Item5
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        id: b5e8d7dd-909c-4ba7-aef4-8609bc50b586
        name: Sample POST Request
    Request5:
      title: Request5
      required:
        - method
        - url
        - headers
        - body
        - timestamp
      type: object
      properties:
        method:
          type: string
        url:
          type: string
        headers:
          $ref: '#/components/schemas/Headers'
        body:
          $ref: '#/components/schemas/Body3'
        timestamp:
          type: string
      example:
        method: POST
        url: echo.getpostman.com/post
        headers:
          content-type: application/json
          accept: '*/*'
          accept-encoding: gzip, deflate
          content-length: 18
        body:
          contentLength: 18
          mode: raw
        timestamp: 2016-12-04T14:30:26.025Z
    Headers:
      title: Headers
      required:
        - accept
        - accept-encoding
      type: object
      properties:
        content-type:
          type: string
        accept:
          type: string
        accept-encoding:
          type: string
        content-length:
          type: integer
          format: int32
      example:
        content-type: application/json
        accept: '*/*'
        accept-encoding: gzip, deflate
        content-length: 18
    Body3:
      title: Body3
      required:
        - contentLength
        - mode
      type: object
      properties:
        contentLength:
          type: integer
          format: int32
        mode:
          type: string
      example:
        contentLength: 18
        mode: raw
    Response:
      title: Response
      required:
        - code
        - body
        - responseTime
        - responseSize
        - headers
      type: object
      properties:
        code:
          type: integer
          format: int32
        body:
          $ref: '#/components/schemas/Body4'
        responseTime:
          type: integer
          format: int32
        responseSize:
          type: integer
          format: int32
        headers:
          $ref: '#/components/schemas/Headers1'
      example:
        code: 200
        body:
          contentLength: 298
        responseTime: 26
        responseSize: 298
        headers:
          date: Sun, 04 Dec 2016 14:30:26 GMT
          content-type: application/json; charset=utf-8
          transfer-encoding: chunked
          connection: keep-alive
          content-encoding: gzip
    Body4:
      title: Body4
      required:
        - contentLength
      type: object
      properties:
        contentLength:
          type: integer
          format: int32
      example:
        contentLength: 298
    Headers1:
      title: Headers1
      required:
        - date
        - content-type
        - transfer-encoding
        - connection
        - content-encoding
      type: object
      properties:
        date:
          type: string
        content-type:
          type: string
        transfer-encoding:
          type: string
        connection:
          type: string
        content-encoding:
          type: string
      example:
        date: Sun, 04 Dec 2016 14:30:26 GMT
        content-type: application/json; charset=utf-8
        transfer-encoding: chunked
        connection: keep-alive
        content-encoding: gzip
    Assertions2:
      title: Assertions2
      required:
        - Status code is 400
      type: object
      properties:
        Status code is 400:
          type: boolean
      example:
        Status code is 400: false
    Failure:
      title: Failure
      required:
        - executionId
        - name
        - message
        - assertion
      type: object
      properties:
        executionId:
          type: integer
          format: int32
        name:
          type: string
        message:
          type: string
        assertion:
          $ref: '#/components/schemas/Assertion'
      example:
        executionId: 2
        name: AssertionError
        message: Expected 'Status code is 400' to be truthy
        assertion:
          Status code is 400: false
    Assertion:
      title: Assertion
      required:
        - Status code is 400
      type: object
      properties:
        Status code is 400:
          type: boolean
      example:
        Status code is 400: false
    ValidResponse4:
      title: ValidResponse4
      required:
        - workspaces
      type: object
      properties:
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
          description: ''
      example:
        workspaces:
          - id: 4e6d34c2-cfdb-4b33-8868-12a875bebda3
            name: My Workspace
            type: personal
          - id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
            name: Team workspace
            type: team
    Workspace:
      title: Workspace
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
      example:
        id: 4e6d34c2-cfdb-4b33-8868-12a875bebda3
        name: My Workspace
        type: personal
    ValidResponse5:
      title: ValidResponse5
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace1'
      example:
        workspace:
          id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
          name: Demo workspace
          type: personal
          description: Demos.
          collections:
            - id: 7c31b469-bd43-4411-9283-6d397855ee0e
              name: Mock demo - collection
              uid: 1234-7c31b469-bd43-4411-9283-6d397855ee0e
            - id: 356fe068-a0f8-4f31-b34d-d12149eac681
              name: Mock demo - response code
              uid: 1234-356fe068-a0f8-4f31-b34d-d12149eac681
          environments:
            - id: 423fd955-a9c8-47cd-9ab0-09a6a575c4be
              name: Mock demo - CNX
              uid: 1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be
            - id: 24c45c84-5147-4c15-bb9a-c3186b81d3cc
              name: Mock Demo - response code
              uid: 1234-24c45c84-5147-4c15-bb9a-c3186b81d3cc
    Workspace1:
      title: Workspace1
      required:
        - id
        - name
        - type
        - description
        - collections
        - environments
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        description:
          type: string
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection3'
          description: ''
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment3'
          description: ''
      example:
        id: f8801e9e-03a4-4c7b-b31e-5db5cd771696
        name: Demo workspace
        type: personal
        description: Demos.
        collections:
          - id: 7c31b469-bd43-4411-9283-6d397855ee0e
            name: Mock demo - collection
            uid: 1234-7c31b469-bd43-4411-9283-6d397855ee0e
          - id: 356fe068-a0f8-4f31-b34d-d12149eac681
            name: Mock demo - response code
            uid: 1234-356fe068-a0f8-4f31-b34d-d12149eac681
        environments:
          - id: 423fd955-a9c8-47cd-9ab0-09a6a575c4be
            name: Mock demo - CNX
            uid: 1234-423fd955-a9c8-47cd-9ab0-09a6a575c4be
          - id: 24c45c84-5147-4c15-bb9a-c3186b81d3cc
            name: Mock Demo - response code
            uid: 1234-24c45c84-5147-4c15-bb9a-c3186b81d3cc
    CreateWorkspaceRequest:
      title: CreateWorkspaceRequest
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace2'
      example:
        workspace:
          name: New Workspace
          type: personal
          description: Some description
          collections:
            - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
              name: Straw hats
              uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
          environments:
            - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
              name: env
              uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
          mocks:
            - id: cda672ef-1375-40e9-baee-e20ece8d7b65
          monitors:
            - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
    Workspace2:
      title: Workspace2
      required:
        - name
        - type
        - description
        - collections
        - environments
        - mocks
        - monitors
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection3'
          description: ''
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment3'
          description: ''
        mocks:
          type: array
          items:
            $ref: '#/components/schemas/Mock7'
          description: ''
        monitors:
          type: array
          items:
            $ref: '#/components/schemas/Monitor7'
          description: ''
      example:
        name: New Workspace
        type: personal
        description: Some description
        collections:
          - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
            name: Straw hats
            uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
        environments:
          - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
            name: env
            uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
        mocks:
          - id: cda672ef-1375-40e9-baee-e20ece8d7b65
        monitors:
          - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
    Monitor7:
      title: Monitor7
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
    SuccessfulResponse6:
      title: SuccessfulResponse6
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace3'
      example:
        workspace:
          id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
          name: New Workspace
    Workspace3:
      title: Workspace3
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        id: cfbcd9bf-cc8b-4d6f-b8ef-440a3e49e29f
        name: New Workspace
    UpdateWorkspaceRequest:
      title: UpdateWorkspaceRequest
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace4'
      example:
        workspace:
          name: New Workspace updated
          description: Some description
          collections:
            - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
              name: Straw hats
              uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
          environments:
            - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
              name: env
              uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
          mocks:
            - id: cda672ef-1375-40e9-baee-e20ece8d7b65
          monitors:
            - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
    Workspace4:
      title: Workspace4
      required:
        - name
        - description
        - collections
        - environments
        - mocks
        - monitors
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection3'
          description: ''
        environments:
          type: array
          items:
            $ref: '#/components/schemas/Environment3'
          description: ''
        mocks:
          type: array
          items:
            $ref: '#/components/schemas/Mock7'
          description: ''
        monitors:
          type: array
          items:
            $ref: '#/components/schemas/Monitor7'
          description: ''
      example:
        name: New Workspace updated
        description: Some description
        collections:
          - id: e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
            name: Straw hats
            uid: 8154-e1fc3c38-a0b8-44a3-bd44-d753a96b2e9d
        environments:
          - id: 83a1aaa2-a204-4bd8-9b92-4d486918906b
            name: env
            uid: 8154-83a1aaa2-a204-4bd8-9b92-4d486918906b
        mocks:
          - id: cda672ef-1375-40e9-baee-e20ece8d7b65
        monitors:
          - id: 1e889bd2-3862-4be0-b2c2-9b1fe9673aec
    Specifiedworkspace-entitiesdonotexist:
      title: Specifiedworkspace-entitiesdonotexist
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      example:
        error:
          name: instanceNotFoundError
          message: The specified workspace does not exist.
    SuccessfulResponse8:
      title: SuccessfulResponse8
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace6'
      example:
        workspace:
          id: '{{workspace_id}}'
    Workspace6:
      title: Workspace6
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: '{{workspace_id}}'
    ValidResponse6:
      title: ValidResponse6
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      example:
        user:
          id: 631643
    User:
      title: User
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 631643
    ImportexternalAPIspecificationRequest:
      title: ImportexternalAPIspecificationRequest
      required:
        - type
        - input
      type: object
      properties:
        type:
          type: string
        input:
          $ref: '#/components/schemas/Input'
      example:
        type: json
        input:
          openapi: 3.0.0
          info:
            version: 1.0.0
            title: Swagger Petstore
            license:
              name: MIT
          servers:
            - url: http://petstore.swagger.io/v1
          paths:
            /pets:
              get:
                summary: List all pets
                operationId: listPets
                parameters:
                  - name: limit
                    in: query
                    description: limit
                    required: false
                    schema:
                      type: integer
                      format: int32
                responses:
                  default:
                    description: unexpected error
                    content:
                      application/json:
                        schema:
                          $ref: '#/components/schemas/Error'
          components:
            schemas:
              Error:
                required:
                  - code
                  - message
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
    Input:
      title: Input
      required:
        - openapi
        - info
        - servers
        - paths
        - components
      type: object
      properties:
        openapi:
          type: string
        info:
          $ref: '#/components/schemas/Info4'
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
          description: ''
        paths:
          $ref: '#/components/schemas/Paths'
        components:
          $ref: '#/components/schemas/Components'
      example:
        openapi: 3.0.0
        info:
          version: 1.0.0
          title: Swagger Petstore
          license:
            name: MIT
        servers:
          - url: http://petstore.swagger.io/v1
        paths:
          /pets:
            get:
              summary: List all pets
              operationId: listPets
              parameters:
                - name: limit
                  in: query
                  description: limit
                  required: false
                  schema:
                    type: integer
                    format: int32
              responses:
                default:
                  description: unexpected error
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Error'
        components:
          schemas:
            Error:
              required:
                - code
                - message
              properties:
                code:
                  type: integer
                  format: int32
                message:
                  type: string
    Info4:
      title: Info4
      required:
        - version
        - title
        - license
      type: object
      properties:
        version:
          type: string
        title:
          type: string
        license:
          $ref: '#/components/schemas/License'
      example:
        version: 1.0.0
        title: Swagger Petstore
        license:
          name: MIT
    License:
      title: License
      required:
        - name
      type: object
      properties:
        name:
          type: string
      example:
        name: MIT
    Server:
      title: Server
      required:
        - url
      type: object
      properties:
        url:
          type: string
      example:
        url: http://petstore.swagger.io/v1
    Paths:
      title: Paths
      required:
        - /pets
      type: object
      properties:
        /pets:
          $ref: '#/components/schemas/Pets'
      example:
        /pets:
          get:
            summary: List all pets
            operationId: listPets
            parameters:
              - name: limit
                in: query
                description: limit
                required: false
                schema:
                  type: integer
                  format: int32
            responses:
              default:
                description: unexpected error
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Error'
    Pets:
      title: Pets
      required:
        - get
      type: object
      properties:
        get:
          $ref: '#/components/schemas/Get'
      example:
        get:
          summary: List all pets
          operationId: listPets
          parameters:
            - name: limit
              in: query
              description: limit
              required: false
              schema:
                type: integer
                format: int32
          responses:
            default:
              description: unexpected error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Error'
    Get:
      title: Get
      required:
        - summary
        - operationId
        - parameters
        - responses
      type: object
      properties:
        summary:
          type: string
        operationId:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          description: ''
        responses:
          $ref: '#/components/schemas/Responses'
      example:
        summary: List all pets
        operationId: listPets
        parameters:
          - name: limit
            in: query
            description: limit
            required: false
            schema:
              type: integer
              format: int32
        responses:
          default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    Parameter:
      title: Parameter
      required:
        - name
        - in
        - description
        - required
        - schema
      type: object
      properties:
        name:
          type: string
        in:
          type: string
        description:
          type: string
        required:
          type: boolean
        schema:
          $ref: '#/components/schemas/Schema'
      example:
        name: limit
        in: query
        description: limit
        required: false
        schema:
          type: integer
          format: int32
    Schema:
      title: Schema
      required:
        - type
        - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      example:
        type: integer
        format: int32
    Responses:
      title: Responses
      required:
        - default
      type: object
      properties:
        default:
          $ref: '#/components/schemas/Default'
      example:
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    Default:
      title: Default
      required:
        - description
        - content
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/Content'
      example:
        description: unexpected error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
    Content:
      title: Content
      required:
        - application/json
      type: object
      properties:
        application/json:
          $ref: '#/components/schemas/ApplicationJson'
      example:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ApplicationJson:
      title: ApplicationJson
      required:
        - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema1'
      example:
        schema:
          $ref: '#/components/schemas/Error'
    Schema1:
      title: Schema1
      required:
        - $ref
      type: object
      properties:
        $ref:
          type: string
    Components:
      title: Components
      required:
        - schemas
      type: object
      properties:
        schemas:
          $ref: '#/components/schemas/Schemas'
      example:
        schemas:
          Error:
            required:
              - code
              - message
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
    Schemas:
      title: Schemas
      required:
        - Error
      type: object
      properties:
        Error:
          $ref: '#/components/schemas/Error21'
      example:
        Error:
          required:
            - code
            - message
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
    Error21:
      title: Error21
      required:
        - required
        - properties
      type: object
      properties:
        required:
          type: array
          items:
            type: string
          description: ''
        properties:
          $ref: '#/components/schemas/Properties'
      example:
        required:
          - code
          - message
        properties:
          code:
            type: integer
            format: int32
          message:
            type: string
    Properties:
      title: Properties
      required:
        - code
        - message
      type: object
      properties:
        code:
          $ref: '#/components/schemas/Code'
        message:
          $ref: '#/components/schemas/Message'
      example:
        code:
          type: integer
          format: int32
        message:
          type: string
    Code:
      title: Code
      required:
        - type
        - format
      type: object
      properties:
        type:
          type: string
        format:
          type: string
      example:
        type: integer
        format: int32
    Message:
      title: Message
      required:
        - type
      type: object
      properties:
        type:
          type: string
      example:
        type: string
    Success_Import-Stringifiedbody:
      title: Success_Import-Stringifiedbody
      required:
        - collections
      type: object
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection3'
          description: ''
      example:
        collections:
          - id: 401fcf93-9c45-4832-9616-6c6b698eeda6
            name: Swagger Petstore
            uid: 2282-401fcf93-9c45-4832-9616-6c6b698eeda6
    Error_InvalidParams:
      title: Error_InvalidParams
      required:
        - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error13'
      example:
        error:
          name: invalidParamsError
          message: The request body has invalid values for the type parameter. Value must be one of file, string, json
          details:
            param: type
    Success_ImporttoaspecificworkspacewithworkspaceIDpassedintheheaders:
      title: Success_ImporttoaspecificworkspacewithworkspaceIDpassedintheheaders
      required:
        - collections
      type: object
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection3'
          description: ''
      example:
        collections:
          - id: e956ff02-7597-4f8d-a5e7-1c18208c9e56
            name: Swagger Petstore
            uid: 2282-e956ff02-7597-4f8d-a5e7-1c18208c9e56
    CreateAPIVersionRequest:
      title: CreateAPIVersionRequest
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version'
      example:
        version:
          name: 1.0
          source:
            id: '{{apiVersionId}}'
            schema: true
            relations:
              monitor: true
              mock: true
              documentation: true
    Version:
      title: Version
      required:
        - name
        - source
      type: object
      properties:
        name:
          type: string
        source:
          $ref: '#/components/schemas/Source'
      example:
        name: 1.0
        source:
          id: '{{apiVersionId}}'
          schema: true
          relations:
            monitor: true
            mock: true
            documentation: true
    Source:
      title: Source
      required:
        - id
        - schema
        - relations
      type: object
      properties:
        id:
          type: string
        schema:
          type: boolean
        relations:
          $ref: '#/components/schemas/Relations'
      example:
        id: '{{apiVersionId}}'
        schema: true
        relations:
          monitor: true
          mock: true
          documentation: true
    Relations:
      title: Relations
      required:
        - monitor
        - mock
        - documentation
      type: object
      properties:
        monitor:
          type: boolean
        mock:
          type: boolean
        documentation:
          type: boolean
      example:
        monitor: true
        mock: true
        documentation: true
    CreateAPIversion:
      title: CreateAPIversion
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version1'
      example:
        version:
          id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
          name: 1.0
          api: 2b95d07c-8379-4bd1-924f-e7e1af185284
    Version1:
      title: Version1
      required:
        - id
        - name
        - api
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        api:
          type: string
      example:
        id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
        name: 1.0
        api: 2b95d07c-8379-4bd1-924f-e7e1af185284
    UpdateanAPIVersionRequest:
      title: UpdateanAPIVersionRequest
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version2'
      example:
        version:
          name: 2.0
    Version2:
      title: Version2
      required:
        - name
      type: object
      properties:
        name:
          type: string
      example:
        name: 2.0
    UpdateanAPIversion:
      title: UpdateanAPIversion
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version3'
      example:
        version:
          id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
          name: 2.0
          createdAt: 2019-07-26T11:24:15Z
          updatedAt: 2019-08-09T09:27:36Z
          api: 2b95d07c-8379-4bd1-924f-e7e1af185284
          createdBy: 12
          updatedBy: 5665
    Version3:
      title: Version3
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - api
        - createdBy
        - updatedBy
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        api:
          type: string
        createdBy:
          type: string
        updatedBy:
          type: string
      example:
        id: d71cf403-c549-4c7c-9dc6-a6a105acf67c
        name: 2.0
        createdAt: 2019-07-26T11:24:15Z
        updatedAt: 2019-08-09T09:27:36Z
        api: 2b95d07c-8379-4bd1-924f-e7e1af185284
        createdBy: 12
        updatedBy: 5665
    DeleteanAPIversion:
      title: DeleteanAPIversion
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version4'
      example:
        version:
          id: 03c17f53-7e2e-427d-b55a-006b244f29ff
    Version4:
      title: Version4
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 03c17f53-7e2e-427d-b55a-006b244f29ff
    GetanAPIversion:
      title: GetanAPIversion
      required:
        - version
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Version5'
      example:
        version:
          id: 03c17f53-7e2e-427d-b55a-006b244f29ff
          name: 0.1
          api: 06e41ca3-8bea-4bc5-a726-70338b9f1940
          schema:
            - 3484cd1e-e00d-4c39-aea4-539663afe898
          createdBy: 5665
          updatedBy: 5665
          createdAt: 2019-07-21T16:31:15Z
          updatedAt: 2019-07-21T16:31:15Z
    Version5:
      title: Version5
      required:
        - id
        - name
        - api
        - schema
        - createdBy
        - updatedBy
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        api:
          type: string
        schema:
          type: array
          items:
            type: string
          description: ''
        createdBy:
          type: string
        updatedBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: 03c17f53-7e2e-427d-b55a-006b244f29ff
        name: 0.1
        api: 06e41ca3-8bea-4bc5-a726-70338b9f1940
        schema:
          - 3484cd1e-e00d-4c39-aea4-539663afe898
        createdBy: 5665
        updatedBy: 5665
        createdAt: 2019-07-21T16:31:15Z
        updatedAt: 2019-07-21T16:31:15Z
    GetAllAPIversions:
      title: GetAllAPIversions
      required:
        - versions
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Version6'
          description: ''
      example:
        versions:
          - id: 024660a6-c837-46ca-91d8-7e8dd7c669de
            name: 0.1
            summary: Summary
            description: Description
            createdBy: 5665
            createdAt: 2019-02-12 19:34:49
            updatedAt: 2019-02-12 19:34:49
          - id: 00932d3b-20f1-454f-a77e-38b4023163ea
            name: 0.2
            summary: Summary
            description: Description
            createdBy: 5665
            createdAt: 2019-02-12 19:34:49
            updatedAt: 2019-02-12 19:34:49
    Version6:
      title: Version6
      required:
        - id
        - name
        - summary
        - description
        - createdBy
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        summary:
          type: string
        description:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: 024660a6-c837-46ca-91d8-7e8dd7c669de
        name: 0.1
        summary: Summary
        description: Description
        createdBy: 5665
        createdAt: 2019-02-12 19:34:49
        updatedAt: 2019-02-12 19:34:49
    Createschema:
      title: Createschema
      required:
        - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema2'
      example:
        schema:
          id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
          language: yaml
          apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
          type: openapi3
          createdBy: 5665
          updateBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
    Schema2:
      title: Schema2
      required:
        - id
        - language
        - apiVersion
        - type
        - createdBy
        - updateBy
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: string
        language:
          type: string
        apiVersion:
          type: string
        type:
          type: string
        createdBy:
          type: string
        updateBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
        language: yaml
        apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
        type: openapi3
        createdBy: 5665
        updateBy: 5665
        createdAt: 2019-02-12 19:34:49
        updatedAt: 2019-02-12 19:34:49
    Updateschema:
      title: Updateschema
      required:
        - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema2'
      example:
        schema:
          id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
          language: yaml
          apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
          type: openapi3
          createdBy: 5665
          updateBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
    Getschema:
      title: Getschema
      required:
        - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/Schema2'
      example:
        schema:
          id: e3b3a0b7-34d5-4fc5-83e0-118bd9e8c822
          language: yaml
          apiVersion: ad810c39-df60-434e-a76f-a2192cd8d81f
          type: openapi3
          createdBy: 5665
          updateBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
    CreatecollectionfromschemaRequest:
      title: CreatecollectionfromschemaRequest
      required:
        - name
        - relations
      type: object
      properties:
        name:
          type: string
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relations1'
          description: ''
      example:
        name: My generated collection
        relations:
          - type: contracttest
    Relations1:
      title: Relations1
      required:
        - type
      type: object
      properties:
        type:
          type: string
      example:
        type: contracttest
    Createcollectionfromschema:
      title: Createcollectionfromschema
      required:
        - collection
        - relations
      type: object
      properties:
        collection:
          $ref: '#/components/schemas/Collection6'
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relations2'
          description: ''
      example:
        collection:
          id: e6b0d46a-8722-4f42-ab86-f5f473187ddf
          uid: 112098-e6b0d46a-8722-4f42-ab86-f5f473187ddf
        relations:
          - type: contracttest
            id: 4b40f06a-5a6a-448f-bfcd-a6dbcb68da22
    Relations2:
      title: Relations2
      required:
        - type
        - id
      type: object
      properties:
        type:
          type: string
        id:
          type: string
      example:
        type: contracttest
        id: 4b40f06a-5a6a-448f-bfcd-a6dbcb68da22
    GetlinkedrelationsforanAPIversion:
      title: GetlinkedrelationsforanAPIversion
      required:
        - relations
      type: object
      properties:
        relations:
          $ref: '#/components/schemas/Relations3'
      example:
        relations:
          contracttest:
            2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
              id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
              name: C test
              updatedAt: 2019-08-29T10:18:11Z
          integrationtest:
            521b0486-ab91-4d3a-9189-43c9380a0533:
              id: 521b0486-ab91-4d3a-9189-43c9380a0533
              name: C1
              updatedAt: 2019-08-29T11:40:39Z
            a236b715-e682-460b-97b6-c1db24f7612e:
              id: a236b715-e682-460b-97b6-c1db24f7612e
              name: C test
              updatedAt: 2019-08-29T10:18:11Z
          mock:
            4ccd755f-2c80-481b-a262-49b55e12f5e1:
              id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
              name: Mock
              url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
              updatedAt: 2019-08-20T10:18:13Z
    Relations3:
      title: Relations3
      required:
        - contracttest
        - integrationtest
        - mock
      type: object
      properties:
        contracttest:
          $ref: '#/components/schemas/Contracttest'
        integrationtest:
          $ref: '#/components/schemas/Integrationtest'
        mock:
          $ref: '#/components/schemas/Mock11'
      example:
        contracttest:
          2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
            id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
            name: C test
            updatedAt: 2019-08-29T10:18:11Z
        integrationtest:
          521b0486-ab91-4d3a-9189-43c9380a0533:
            id: 521b0486-ab91-4d3a-9189-43c9380a0533
            name: C1
            updatedAt: 2019-08-29T11:40:39Z
          a236b715-e682-460b-97b6-c1db24f7612e:
            id: a236b715-e682-460b-97b6-c1db24f7612e
            name: C test
            updatedAt: 2019-08-29T10:18:11Z
        mock:
          4ccd755f-2c80-481b-a262-49b55e12f5e1:
            id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
            name: Mock
            url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
            updatedAt: 2019-08-20T10:18:13Z
    Contracttest:
      title: Contracttest
      required:
        - 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
      type: object
      properties:
        2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
          $ref: '#/components/schemas/2a9b8fa888b74b8683728e3f6f6e07f2'
      example:
        2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2:
          id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
          name: C test
          updatedAt: 2019-08-29T10:18:11Z
    2a9b8fa888b74b8683728e3f6f6e07f2:
      title: 2a9b8fa888b74b8683728e3f6f6e07f2
      required:
        - id
        - name
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
      example:
        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
        name: C test
        updatedAt: 2019-08-29T10:18:11Z
    Integrationtest:
      title: Integrationtest
      required:
        - 521b0486-ab91-4d3a-9189-43c9380a0533
        - a236b715-e682-460b-97b6-c1db24f7612e
      type: object
      properties:
        521b0486-ab91-4d3a-9189-43c9380a0533:
          $ref: '#/components/schemas/521b0486Ab914d3a918943c9380a0533'
        a236b715-e682-460b-97b6-c1db24f7612e:
          $ref: '#/components/schemas/A236b715E682460b97b6C1db24f7612e'
      example:
        521b0486-ab91-4d3a-9189-43c9380a0533:
          id: 521b0486-ab91-4d3a-9189-43c9380a0533
          name: C1
          updatedAt: 2019-08-29T11:40:39Z
        a236b715-e682-460b-97b6-c1db24f7612e:
          id: a236b715-e682-460b-97b6-c1db24f7612e
          name: C test
          updatedAt: 2019-08-29T10:18:11Z
    521b0486Ab914d3a918943c9380a0533:
      title: 521b0486Ab914d3a918943c9380a0533
      required:
        - id
        - name
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
      example:
        id: 521b0486-ab91-4d3a-9189-43c9380a0533
        name: C1
        updatedAt: 2019-08-29T11:40:39Z
    A236b715E682460b97b6C1db24f7612e:
      title: A236b715E682460b97b6C1db24f7612e
      required:
        - id
        - name
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
      example:
        id: a236b715-e682-460b-97b6-c1db24f7612e
        name: C test
        updatedAt: 2019-08-29T10:18:11Z
    Mock11:
      title: Mock11
      required:
        - 4ccd755f-2c80-481b-a262-49b55e12f5e1
      type: object
      properties:
        4ccd755f-2c80-481b-a262-49b55e12f5e1:
          $ref: '#/components/schemas/4ccd755f2c80481bA26249b55e12f5e1'
      example:
        4ccd755f-2c80-481b-a262-49b55e12f5e1:
          id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
          name: Mock
          url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
          updatedAt: 2019-08-20T10:18:13Z
    4ccd755f2c80481bA26249b55e12f5e1:
      title: 4ccd755f2c80481bA26249b55e12f5e1
      required:
        - id
        - name
        - url
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
        updatedAt:
          type: string
      example:
        id: 4ccd755f-2c80-481b-a262-49b55e12f5e1
        name: Mock
        url: https://4ccd755f-2c80-481b-a262-49b55e12f5e1.mock-beta.pstmn.io
        updatedAt: 2019-08-20T10:18:13Z
    Getrelationsofatype:
      title: Getrelationsofatype
      required:
        - contracttest
      type: object
      properties:
        contracttest:
          type: array
          items:
            $ref: '#/components/schemas/Contracttest1'
          description: ''
      example:
        contracttest:
          - id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
            name: C test
            updatedAt: 2019-08-29T10:18:11Z
            collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
          - id: 521b0486-ab91-4d3a-9189-43c9380a0533
            name: C1
            updatedAt: 2019-08-29T11:40:39Z
            collectionId: 7332157-a8bcd143-2b01-4b12-8c14-c7d05be77725
    Contracttest1:
      title: Contracttest1
      required:
        - id
        - name
        - updatedAt
        - collectionId
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
        collectionId:
          type: string
      example:
        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
        name: C test
        updatedAt: 2019-08-29T10:18:11Z
        collectionId: 7732157-a8bcd149-2b01-4b4c-8c14-c7d05be77745
    Getrelationsofatype1:
      title: Getrelationsofatype1
      required:
        - id
        - name
        - updatedAt
        - createdAt
        - versionTag
        - collection
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        updatedAt:
          type: string
        createdAt:
          type: string
        versionTag:
          $ref: '#/components/schemas/VersionTag'
        collection:
          $ref: '#/components/schemas/Collection13'
      example:
        id: 2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2
        name: C test
        updatedAt: 2019-08-29T10:18:11Z
        createdAt: 2019-08-29T10:18:11Z
        versionTag:
          name: v1.0.1
          id: 53eed8bf-1f73-4cf2-a8f0-02ae4a959f03
        collection:
          info:
            _postman_id: 5cfe4ee2-10d0-49e5-ac3e-a1a647c37f2d
            name: Generated Collection - 2
            schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
          item:
            - name: pets
              item:
                - name: List all pets
                  _postman_id: b80150b6-fb5e-4e48-88ab-de4bfba06112
                  request:
                    auth:
                      type: noauth
                    method: GET
                    header: []
                    url:
                      raw: >-
                        {{baseUrl}}/pets?limit=

                        <integer>
                      host:
                        - '{{baseUrl}}'
                      path:
                        - pets
                      query:
                        - description: How many items to return at one time (max 100)
                          key: limit
                          value: >2-

                                <integer>
                  response:
                    - id: b1f75aee-327e-412f-bf5a-74c9b01ef605
                      name: A paged array of pets
                      originalRequest:
                        method: GET
                        header: []
                        url:
                          raw: >-
                            {{baseUrl}}/pets?limit=
                                    <integer>
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                          query:
                            - key: limit
                              value: >2-

                                            <integer>
                      status: OK
                      code: 200
                      _postman_previewlanguage: json
                      header:
                        - key: x-next
                          value: >2-

                                            <string>
                          description: A link to the next page of responses
                        - key: Content-Type
                          value: application/json
                      cookie: []
                      responseTime:
                      body: >-
                        [
                         {
                          "id": "
                                            <long>",
                          "name": "
                                                <string>",
                          "tag": "
                                                    <string>"
                         },
                         {
                          "id": "
                                                        <long>",
                          "name": "
                                                            <string>",
                          "tag": "
                                                                <string>"
                         }
                        ]
                    - id: f6260b7e-5c90-4b5f-98d5-41f04e04108a
                      name: unexpected error
                      originalRequest:
                        method: GET
                        header: []
                        url:
                          raw: >-
                            {{baseUrl}}/pets?limit=
                                                                        <integer>
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                          query:
                            - key: limit
                              value: >2-

                                                                                <integer>
                      status: Internal Server Error
                      code: 500
                      _postman_previewlanguage: json
                      header:
                        - key: Content-Type
                          value: application/json
                      cookie: []
                      responseTime:
                      body: >-
                        {
                         "code": "
                                                                            <integer>",
                         "message": "
                                                                                <string>"
                        }
                - name: Create a pet
                  _postman_id: a5e21c45-2389-4571-a3b3-2d0f7d6aac6a
                  request:
                    auth:
                      type: noauth
                    method: POST
                    header: []
                    url:
                      raw: '{{baseUrl}}/pets'
                      host:
                        - '{{baseUrl}}'
                      path:
                        - pets
                  response:
                    - id: a052da96-a327-4b83-8e7e-66e97249f6d3
                      name: unexpected error
                      originalRequest:
                        method: POST
                        header: []
                        url:
                          raw: '{{baseUrl}}/pets'
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                      status: Internal Server Error
                      code: 500
                      _postman_previewlanguage: json
                      header:
                        - key: Content-Type
                          value: application/json
                      cookie: []
                      responseTime:
                      body: >-
                        {
                         "code": "
                                                                                    <integer>",
                         "message": "
                                                                                        <string>"
                        }
                    - id: e1e42585-2624-4f02-bc5c-b433ef2cad2c
                      name: Null response
                      originalRequest:
                        method: POST
                        header: []
                        url:
                          raw: '{{baseUrl}}/pets'
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                      status: Created
                      code: 201
                      _postman_previewlanguage: text
                      header:
                        - key: Content-Type
                          value: text/plain
                      cookie: []
                      responseTime:
                      body: ''
                - name: Info for a specific pet
                  _postman_id: 9307687f-115f-40ac-ad1d-15df249f7876
                  request:
                    auth:
                      type: noauth
                    method: GET
                    header: []
                    url:
                      raw: '{{baseUrl}}/pets/:petId'
                      host:
                        - '{{baseUrl}}'
                      path:
                        - pets
                        - :petId
                      variable:
                        - id: 2b0bb9bb-dd8c-4fd9-ac5f-4bf6a7188bdd
                          key: petId
                          value: >2-

                                                                                                <string>
                          type: string
                          description: (Required) The id of the pet to retrieve
                  response:
                    - id: b3893689-4838-40e7-8f4c-0ad2539e4018
                      name: Expected response to a valid request
                      originalRequest:
                        method: GET
                        header: []
                        url:
                          raw: '{{baseUrl}}/pets/:petId'
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                            - :petId
                          variable:
                            - key: petId
                      status: OK
                      code: 200
                      _postman_previewlanguage: json
                      header:
                        - key: Content-Type
                          value: application/json
                      cookie: []
                      responseTime:
                      body: >-
                        {
                         "id": "
                                                                                                <long>",
                         "name": "
                                                                                                    <string>",
                         "tag": "
                                                                                                        <string>"
                        }
                    - id: b56180aa-dbd0-40ad-8b1a-d2caaf8a1df7
                      name: unexpected error
                      originalRequest:
                        method: GET
                        header: []
                        url:
                          raw: '{{baseUrl}}/pets/:petId'
                          host:
                            - '{{baseUrl}}'
                          path:
                            - pets
                            - :petId
                          variable:
                            - key: petId
                      status: Internal Server Error
                      code: 500
                      _postman_previewlanguage: json
                      header:
                        - key: Content-Type
                          value: application/json
                      cookie: []
                      responseTime:
                      body: >-
                        {
                         "code": "
                                                                                                            <integer>",
                         "message": "
                                                                                                                <string>"
                        }
              _postman_id: 1d185956-a438-4248-9fa5-33598a892d23
          variable:
            - id: baseUrl
              key: baseUrl
              value: http://petstore.swagger.io/v1
              type: string
    VersionTag:
      title: VersionTag
      required:
        - name
        - id
      type: object
      properties:
        name:
          type: string
        id:
          type: string
      example:
        name: v1.0.1
        id: 53eed8bf-1f73-4cf2-a8f0-02ae4a959f03
    Collection13:
      title: Collection13
      required:
        - info
        - item
        - variable
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info5'
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item6'
          description: ''
        variable:
          type: array
          items:
            $ref: '#/components/schemas/Variable2'
          description: ''
      example:
        info:
          _postman_id: 5cfe4ee2-10d0-49e5-ac3e-a1a647c37f2d
          name: Generated Collection - 2
          schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
        item:
          - name: pets
            item:
              - name: List all pets
                _postman_id: b80150b6-fb5e-4e48-88ab-de4bfba06112
                request:
                  auth:
                    type: noauth
                  method: GET
                  header: []
                  url:
                    raw: >-
                      {{baseUrl}}/pets?limit=

                      <integer>
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                    query:
                      - description: How many items to return at one time (max 100)
                        key: limit
                        value: >2-

                              <integer>
                response:
                  - id: b1f75aee-327e-412f-bf5a-74c9b01ef605
                    name: A paged array of pets
                    originalRequest:
                      method: GET
                      header: []
                      url:
                        raw: >-
                          {{baseUrl}}/pets?limit=
                                  <integer>
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                        query:
                          - key: limit
                            value: >2-

                                          <integer>
                    status: OK
                    code: 200
                    _postman_previewlanguage: json
                    header:
                      - key: x-next
                        value: >2-

                                          <string>
                        description: A link to the next page of responses
                      - key: Content-Type
                        value: application/json
                    cookie: []
                    responseTime:
                    body: >-
                      [
                       {
                        "id": "
                                          <long>",
                        "name": "
                                              <string>",
                        "tag": "
                                                  <string>"
                       },
                       {
                        "id": "
                                                      <long>",
                        "name": "
                                                          <string>",
                        "tag": "
                                                              <string>"
                       }
                      ]
                  - id: f6260b7e-5c90-4b5f-98d5-41f04e04108a
                    name: unexpected error
                    originalRequest:
                      method: GET
                      header: []
                      url:
                        raw: >-
                          {{baseUrl}}/pets?limit=
                                                                      <integer>
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                        query:
                          - key: limit
                            value: >2-

                                                                              <integer>
                    status: Internal Server Error
                    code: 500
                    _postman_previewlanguage: json
                    header:
                      - key: Content-Type
                        value: application/json
                    cookie: []
                    responseTime:
                    body: >-
                      {
                       "code": "
                                                                          <integer>",
                       "message": "
                                                                              <string>"
                      }
              - name: Create a pet
                _postman_id: a5e21c45-2389-4571-a3b3-2d0f7d6aac6a
                request:
                  auth:
                    type: noauth
                  method: POST
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                response:
                  - id: a052da96-a327-4b83-8e7e-66e97249f6d3
                    name: unexpected error
                    originalRequest:
                      method: POST
                      header: []
                      url:
                        raw: '{{baseUrl}}/pets'
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                    status: Internal Server Error
                    code: 500
                    _postman_previewlanguage: json
                    header:
                      - key: Content-Type
                        value: application/json
                    cookie: []
                    responseTime:
                    body: >-
                      {
                       "code": "
                                                                                  <integer>",
                       "message": "
                                                                                      <string>"
                      }
                  - id: e1e42585-2624-4f02-bc5c-b433ef2cad2c
                    name: Null response
                    originalRequest:
                      method: POST
                      header: []
                      url:
                        raw: '{{baseUrl}}/pets'
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                    status: Created
                    code: 201
                    _postman_previewlanguage: text
                    header:
                      - key: Content-Type
                        value: text/plain
                    cookie: []
                    responseTime:
                    body: ''
              - name: Info for a specific pet
                _postman_id: 9307687f-115f-40ac-ad1d-15df249f7876
                request:
                  auth:
                    type: noauth
                  method: GET
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets/:petId'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                      - :petId
                    variable:
                      - id: 2b0bb9bb-dd8c-4fd9-ac5f-4bf6a7188bdd
                        key: petId
                        value: >2-

                                                                                              <string>
                        type: string
                        description: (Required) The id of the pet to retrieve
                response:
                  - id: b3893689-4838-40e7-8f4c-0ad2539e4018
                    name: Expected response to a valid request
                    originalRequest:
                      method: GET
                      header: []
                      url:
                        raw: '{{baseUrl}}/pets/:petId'
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                          - :petId
                        variable:
                          - key: petId
                    status: OK
                    code: 200
                    _postman_previewlanguage: json
                    header:
                      - key: Content-Type
                        value: application/json
                    cookie: []
                    responseTime:
                    body: >-
                      {
                       "id": "
                                                                                              <long>",
                       "name": "
                                                                                                  <string>",
                       "tag": "
                                                                                                      <string>"
                      }
                  - id: b56180aa-dbd0-40ad-8b1a-d2caaf8a1df7
                    name: unexpected error
                    originalRequest:
                      method: GET
                      header: []
                      url:
                        raw: '{{baseUrl}}/pets/:petId'
                        host:
                          - '{{baseUrl}}'
                        path:
                          - pets
                          - :petId
                        variable:
                          - key: petId
                    status: Internal Server Error
                    code: 500
                    _postman_previewlanguage: json
                    header:
                      - key: Content-Type
                        value: application/json
                    cookie: []
                    responseTime:
                    body: >-
                      {
                       "code": "
                                                                                                          <integer>",
                       "message": "
                                                                                                              <string>"
                      }
            _postman_id: 1d185956-a438-4248-9fa5-33598a892d23
        variable:
          - id: baseUrl
            key: baseUrl
            value: http://petstore.swagger.io/v1
            type: string
    Info5:
      title: Info5
      required:
        - _postman_id
        - name
        - schema
      type: object
      properties:
        _postman_id:
          type: string
        name:
          type: string
        schema:
          type: string
      example:
        _postman_id: 5cfe4ee2-10d0-49e5-ac3e-a1a647c37f2d
        name: Generated Collection - 2
        schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
    Item6:
      title: Item6
      required:
        - name
        - item
        - _postman_id
      type: object
      properties:
        name:
          type: string
        item:
          type: array
          items:
            $ref: '#/components/schemas/Item7'
          description: ''
        _postman_id:
          type: string
      example:
        name: pets
        item:
          - name: List all pets
            _postman_id: b80150b6-fb5e-4e48-88ab-de4bfba06112
            request:
              auth:
                type: noauth
              method: GET
              header: []
              url:
                raw: >-
                  {{baseUrl}}/pets?limit=

                  <integer>
                host:
                  - '{{baseUrl}}'
                path:
                  - pets
                query:
                  - description: How many items to return at one time (max 100)
                    key: limit
                    value: >2-

                          <integer>
            response:
              - id: b1f75aee-327e-412f-bf5a-74c9b01ef605
                name: A paged array of pets
                originalRequest:
                  method: GET
                  header: []
                  url:
                    raw: >-
                      {{baseUrl}}/pets?limit=
                              <integer>
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                    query:
                      - key: limit
                        value: >2-

                                      <integer>
                status: OK
                code: 200
                _postman_previewlanguage: json
                header:
                  - key: x-next
                    value: >2-

                                      <string>
                    description: A link to the next page of responses
                  - key: Content-Type
                    value: application/json
                cookie: []
                responseTime:
                body: >-
                  [
                   {
                    "id": "
                                      <long>",
                    "name": "
                                          <string>",
                    "tag": "
                                              <string>"
                   },
                   {
                    "id": "
                                                  <long>",
                    "name": "
                                                      <string>",
                    "tag": "
                                                          <string>"
                   }
                  ]
              - id: f6260b7e-5c90-4b5f-98d5-41f04e04108a
                name: unexpected error
                originalRequest:
                  method: GET
                  header: []
                  url:
                    raw: >-
                      {{baseUrl}}/pets?limit=
                                                                  <integer>
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                    query:
                      - key: limit
                        value: >2-

                                                                          <integer>
                status: Internal Server Error
                code: 500
                _postman_previewlanguage: json
                header:
                  - key: Content-Type
                    value: application/json
                cookie: []
                responseTime:
                body: >-
                  {
                   "code": "
                                                                      <integer>",
                   "message": "
                                                                          <string>"
                  }
          - name: Create a pet
            _postman_id: a5e21c45-2389-4571-a3b3-2d0f7d6aac6a
            request:
              auth:
                type: noauth
              method: POST
              header: []
              url:
                raw: '{{baseUrl}}/pets'
                host:
                  - '{{baseUrl}}'
                path:
                  - pets
            response:
              - id: a052da96-a327-4b83-8e7e-66e97249f6d3
                name: unexpected error
                originalRequest:
                  method: POST
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                status: Internal Server Error
                code: 500
                _postman_previewlanguage: json
                header:
                  - key: Content-Type
                    value: application/json
                cookie: []
                responseTime:
                body: >-
                  {
                   "code": "
                                                                              <integer>",
                   "message": "
                                                                                  <string>"
                  }
              - id: e1e42585-2624-4f02-bc5c-b433ef2cad2c
                name: Null response
                originalRequest:
                  method: POST
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                status: Created
                code: 201
                _postman_previewlanguage: text
                header:
                  - key: Content-Type
                    value: text/plain
                cookie: []
                responseTime:
                body: ''
          - name: Info for a specific pet
            _postman_id: 9307687f-115f-40ac-ad1d-15df249f7876
            request:
              auth:
                type: noauth
              method: GET
              header: []
              url:
                raw: '{{baseUrl}}/pets/:petId'
                host:
                  - '{{baseUrl}}'
                path:
                  - pets
                  - :petId
                variable:
                  - id: 2b0bb9bb-dd8c-4fd9-ac5f-4bf6a7188bdd
                    key: petId
                    value: >2-

                                                                                          <string>
                    type: string
                    description: (Required) The id of the pet to retrieve
            response:
              - id: b3893689-4838-40e7-8f4c-0ad2539e4018
                name: Expected response to a valid request
                originalRequest:
                  method: GET
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets/:petId'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                      - :petId
                    variable:
                      - key: petId
                status: OK
                code: 200
                _postman_previewlanguage: json
                header:
                  - key: Content-Type
                    value: application/json
                cookie: []
                responseTime:
                body: >-
                  {
                   "id": "
                                                                                          <long>",
                   "name": "
                                                                                              <string>",
                   "tag": "
                                                                                                  <string>"
                  }
              - id: b56180aa-dbd0-40ad-8b1a-d2caaf8a1df7
                name: unexpected error
                originalRequest:
                  method: GET
                  header: []
                  url:
                    raw: '{{baseUrl}}/pets/:petId'
                    host:
                      - '{{baseUrl}}'
                    path:
                      - pets
                      - :petId
                    variable:
                      - key: petId
                status: Internal Server Error
                code: 500
                _postman_previewlanguage: json
                header:
                  - key: Content-Type
                    value: application/json
                cookie: []
                responseTime:
                body: >-
                  {
                   "code": "
                                                                                                      <integer>",
                   "message": "
                                                                                                          <string>"
                  }
        _postman_id: 1d185956-a438-4248-9fa5-33598a892d23
    Item7:
      title: Item7
      required:
        - name
        - _postman_id
        - request
        - response
      type: object
      properties:
        name:
          type: string
        _postman_id:
          type: string
        request:
          $ref: '#/components/schemas/Request6'
        response:
          type: array
          items:
            $ref: '#/components/schemas/Response1'
          description: ''
      example:
        name: List all pets
        _postman_id: b80150b6-fb5e-4e48-88ab-de4bfba06112
        request:
          auth:
            type: noauth
          method: GET
          header: []
          url:
            raw: >-
              {{baseUrl}}/pets?limit=

              <integer>
            host:
              - '{{baseUrl}}'
            path:
              - pets
            query:
              - description: How many items to return at one time (max 100)
                key: limit
                value: >2-

                      <integer>
        response:
          - id: b1f75aee-327e-412f-bf5a-74c9b01ef605
            name: A paged array of pets
            originalRequest:
              method: GET
              header: []
              url:
                raw: >-
                  {{baseUrl}}/pets?limit=
                          <integer>
                host:
                  - '{{baseUrl}}'
                path:
                  - pets
                query:
                  - key: limit
                    value: >2-

                                  <integer>
            status: OK
            code: 200
            _postman_previewlanguage: json
            header:
              - key: x-next
                value: >2-

                                  <string>
                description: A link to the next page of responses
              - key: Content-Type
                value: application/json
            cookie: []
            responseTime:
            body: >-
              [
               {
                "id": "
                                  <long>",
                "name": "
                                      <string>",
                "tag": "
                                          <string>"
               },
               {
                "id": "
                                              <long>",
                "name": "
                                                  <string>",
                "tag": "
                                                      <string>"
               }
              ]
          - id: f6260b7e-5c90-4b5f-98d5-41f04e04108a
            name: unexpected error
            originalRequest:
              method: GET
              header: []
              url:
                raw: >-
                  {{baseUrl}}/pets?limit=
                                                              <integer>
                host:
                  - '{{baseUrl}}'
                path:
                  - pets
                query:
                  - key: limit
                    value: >2-

                                                                      <integer>
            status: Internal Server Error
            code: 500
            _postman_previewlanguage: json
            header:
              - key: Content-Type
                value: application/json
            cookie: []
            responseTime:
            body: >-
              {
               "code": "
                                                                  <integer>",
               "message": "
                                                                      <string>"
              }
    Request6:
      title: Request6
      required:
        - auth
        - method
        - header
        - url
      type: object
      properties:
        auth:
          $ref: '#/components/schemas/Auth'
        method:
          type: string
        header:
          type: array
          items:
            type: string
          description: ''
        url:
          $ref: '#/components/schemas/Url'
      example:
        auth:
          type: noauth
        method: GET
        header: []
        url:
          raw: >-
            {{baseUrl}}/pets?limit=

            <integer>
          host:
            - '{{baseUrl}}'
          path:
            - pets
          query:
            - description: How many items to return at one time (max 100)
              key: limit
              value: >2-

                    <integer>
    Auth:
      title: Auth
      required:
        - type
      type: object
      properties:
        type:
          type: string
      example:
        type: noauth
    Url:
      title: Url
      required:
        - raw
        - host
        - path
      type: object
      properties:
        raw:
          type: string
        host:
          type: array
          items:
            type: string
          description: ''
        path:
          type: array
          items:
            type: string
          description: ''
        query:
          type: array
          items:
            $ref: '#/components/schemas/Query'
          description: ''
        variable:
          type: array
          items:
            $ref: '#/components/schemas/Variable'
          description: ''
      example:
        raw: >-
          {{baseUrl}}/pets?limit=

          <integer>
        host:
          - '{{baseUrl}}'
        path:
          - pets
        query:
          - description: How many items to return at one time (max 100)
            key: limit
            value: >2-

                  <integer>
    Query:
      title: Query
      required:
        - description
        - key
        - value
      type: object
      properties:
        description:
          type: string
        key:
          type: string
        value:
          type: string
      example:
        description: How many items to return at one time (max 100)
        key: limit
        value: >2-

              <integer>
    Variable:
      title: Variable
      required:
        - id
        - key
        - value
        - type
        - description
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        value:
          type: string
        type:
          type: string
        description:
          type: string
      example:
        id: 2b0bb9bb-dd8c-4fd9-ac5f-4bf6a7188bdd
        key: petId
        value: >2-

                                                                              <string>
        type: string
        description: (Required) The id of the pet to retrieve
    Response1:
      title: Response1
      required:
        - id
        - name
        - originalRequest
        - status
        - code
        - _postman_previewlanguage
        - header
        - cookie
        - responseTime
        - body
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        originalRequest:
          $ref: '#/components/schemas/OriginalRequest'
        status:
          type: string
        code:
          type: integer
          format: int32
        _postman_previewlanguage:
          type: string
        header:
          type: array
          items:
            $ref: '#/components/schemas/Header3'
          description: ''
        cookie:
          type: array
          items:
            type: string
          description: ''
        responseTime:
          type: string
          nullable: true
        body:
          type: string
      example:
        id: b1f75aee-327e-412f-bf5a-74c9b01ef605
        name: A paged array of pets
        originalRequest:
          method: GET
          header: []
          url:
            raw: >-
              {{baseUrl}}/pets?limit=
                      <integer>
            host:
              - '{{baseUrl}}'
            path:
              - pets
            query:
              - key: limit
                value: >2-

                              <integer>
        status: OK
        code: 200
        _postman_previewlanguage: json
        header:
          - key: x-next
            value: >2-

                              <string>
            description: A link to the next page of responses
          - key: Content-Type
            value: application/json
        cookie: []
        responseTime:
        body: >-
          [
           {
            "id": "
                              <long>",
            "name": "
                                  <string>",
            "tag": "
                                      <string>"
           },
           {
            "id": "
                                          <long>",
            "name": "
                                              <string>",
            "tag": "
                                                  <string>"
           }
          ]
    OriginalRequest:
      title: OriginalRequest
      required:
        - method
        - header
        - url
      type: object
      properties:
        method:
          type: string
        header:
          type: array
          items:
            type: string
          description: ''
        url:
          $ref: '#/components/schemas/Url1'
      example:
        method: GET
        header: []
        url:
          raw: >-
            {{baseUrl}}/pets?limit=
                    <integer>
          host:
            - '{{baseUrl}}'
          path:
            - pets
          query:
            - key: limit
              value: >2-

                            <integer>
    Url1:
      title: Url1
      required:
        - raw
        - host
        - path
      type: object
      properties:
        raw:
          type: string
        host:
          type: array
          items:
            type: string
          description: ''
        path:
          type: array
          items:
            type: string
          description: ''
        query:
          type: array
          items:
            $ref: '#/components/schemas/Query1'
          description: ''
        variable:
          type: array
          items:
            $ref: '#/components/schemas/Variable1'
          description: ''
      example:
        raw: >-
          {{baseUrl}}/pets?limit=
                  <integer>
        host:
          - '{{baseUrl}}'
        path:
          - pets
        query:
          - key: limit
            value: >2-

                          <integer>
    Query1:
      title: Query1
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      example:
        key: limit
        value: >2-

                      <integer>
    Variable1:
      title: Variable1
      required:
        - key
      type: object
      properties:
        key:
          type: string
      example:
        key: petId
    Header3:
      title: Header3
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        description:
          type: string
      example:
        key: x-next
        value: >2-

                          <string>
        description: A link to the next page of responses
    Variable2:
      title: Variable2
      required:
        - id
        - key
        - value
        - type
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        value:
          type: string
        type:
          type: string
      example:
        id: baseUrl
        key: baseUrl
        value: http://petstore.swagger.io/v1
        type: string
    CreaterelationsRequest:
      title: CreaterelationsRequest
      required:
        - contracttest
        - testsuite
        - documentation
        - mock
      type: object
      properties:
        contracttest:
          type: array
          items:
            type: string
          description: ''
        testsuite:
          type: array
          items:
            type: string
          description: ''
        documentation:
          type: array
          items:
            type: string
          description: ''
        mock:
          type: array
          items:
            type: string
          description: ''
      example:
        contracttest:
          - collection-uid-1
        testsuite:
          - collection-uid-1
          - collection-uid-2
        documentation:
          - collection-uid-3
        mock:
          - mock-uid-1
    Createmultiplerelationsfromexistingcollections:
      title: Createmultiplerelationsfromexistingcollections
      required:
        - contracttest
        - testsuite
        - documentation
      type: object
      properties:
        contracttest:
          type: array
          items:
            type: string
          description: ''
        testsuite:
          type: array
          items:
            type: string
          description: ''
        documentation:
          type: array
          items:
            type: string
          description: ''
      example:
        contracttest:
          - 5bcece87-ca4b-4e75-a967-2a6845626164
        testsuite:
          - e525fa71-035e-4620-acda-ce878524f1e7
          - 17a974b2-ce79-4b95-9d3f-217d6ff7e979
        documentation:
          - 2084eba6-a17b-4751-8f03-ea60f30ba19c
    CreateAPIRequest:
      title: CreateAPIRequest
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api'
      example:
        api:
          name: Sync Service API
          summary: This is supposed to be a short summary.
          description: This is description.
    Api:
      title: Api
      required:
        - name
        - summary
        - description
      type: object
      properties:
        name:
          type: string
        summary:
          type: string
        description:
          type: string
      example:
        name: Sync Service API
        summary: This is supposed to be a short summary.
        description: This is description.
    CreateAPI:
      title: CreateAPI
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api1'
      example:
        api:
          id: 387c2863-6ee3-4a56-8210-225f774edade
          name: Sync API
          summary: This is a summary
          description: This is supposed to handle markdown *descriptions*.
          createdBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
    Api1:
      title: Api1
      required:
        - id
        - name
        - summary
        - description
        - createdBy
        - createdAt
        - updatedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        summary:
          type: string
        description:
          type: string
        createdBy:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: 387c2863-6ee3-4a56-8210-225f774edade
        name: Sync API
        summary: This is a summary
        description: This is supposed to handle markdown *descriptions*.
        createdBy: 5665
        createdAt: 2019-02-12 19:34:49
        updatedAt: 2019-02-12 19:34:49
    UpdateanAPIRequest:
      title: UpdateanAPIRequest
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api2'
      example:
        api:
          name: New name
          description: This is an updated Description
    Api2:
      title: Api2
      required:
        - name
        - description
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: New name
        description: This is an updated Description
    UpdateanAPI:
      title: UpdateanAPI
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api1'
      example:
        api:
          id: 387c2863-6ee3-4a56-8210-225f774edade
          name: Sync API
          summary: This is a summary
          description: This is a description.
          createdBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
    DeleteanAPI:
      title: DeleteanAPI
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api4'
      example:
        api:
          id: 387c2863-6ee3-4a56-8210-225f774edade
    Api4:
      title: Api4
      required:
        - id
      type: object
      properties:
        id:
          type: string
      example:
        id: 387c2863-6ee3-4a56-8210-225f774edade
    GetallAPIs:
      title: GetallAPIs
      required:
        - apis
      type: object
      properties:
        apis:
          type: array
          items:
            $ref: '#/components/schemas/Api1'
          description: ''
      example:
        apis:
          - id: 387c2863-6ee3-4a56-8210-225f774edade
            name: Sync API
            summary: This is a summary
            description: This is a description.
            createdBy: 5665
            createdAt: 2019-02-12 19:34:49
            updatedAt: 2019-02-12 19:34:49
          - id: 387c2863-6ee3-4a56-8210-225f774edade
            name: Sync API
            summary: This is a summary
            description: This is a description.
            createdBy: 5665
            createdAt: 2019-02-12 19:34:49
            updatedAt: 2019-02-12 19:34:49
          - id: 387c2863-6ee3-4a56-8210-225f774edhdh
            name: Sync API 2
            summary: This is a summary
            description: This is a description.
            createdBy: 5665
            createdAt: 2019-02-12 19:34:49
            updatedAt: 2019-02-12 19:34:49
    GetsingleAPI:
      title: GetsingleAPI
      required:
        - api
      type: object
      properties:
        api:
          $ref: '#/components/schemas/Api1'
      example:
        api:
          id: 387c2863-6ee3-4a56-8210-225f774edade
          name: Sync API
          summary: This is a summary
          description: This is a description.This is a description.
          createdBy: 5665
          createdAt: 2019-02-12 19:34:49
          updatedAt: 2019-02-12 19:34:49
tags:
  - name: Collections
  - name: Environments
  - name: Mocks
  - name: Monitors
  - name: Workspaces
  - name: User
  - name: Import
  - name: API Version
    description: This folder contains the requests around API versions.
  - name: Schema
    description: This folder contains all the endpoints related to Schemas.
  - name: Relations
    description: "This contains requests related to relations. \n\nRelations can be of the following types: \n- `contracttest`\n- `integrationtest`\n- `documentation`\n- `testsuite`\n- `environment`\n- `mock`\n- `monitor`"
  - name: API
